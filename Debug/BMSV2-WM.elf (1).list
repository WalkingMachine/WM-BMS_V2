
BMSV2-WM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08003148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          00003f98  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003fa0  20003fa0  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_line   00008b54  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00018c05  00000000  00000000  00028b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003c9e  00000000  00000000  00041791  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001120  00000000  00000000  00045430  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000014e8  00000000  00000000  00046550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000c532  00000000  00000000  00047a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000060da  00000000  00000000  00053f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0005a044  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000031b8  00000000  00000000  0005a0c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030f0 	.word	0x080030f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080030f0 	.word	0x080030f0

080001c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
  ldr  r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80001ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001f2:	f000 f813 	bl	800021c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f002 ff4d 	bl	8003094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80001fa:	f002 fba1 	bl	8002940 <main>
  bx  lr    
 80001fe:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000200:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000204:	08003148 	.word	0x08003148
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800020c:	20000008 	.word	0x20000008
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000210:	20000008 	.word	0x20000008
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000214:	20003fa0 	.word	0x20003fa0

08000218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC_IRQHandler>
	...

0800021c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800021c:	490f      	ldr	r1, [pc, #60]	; (800025c <SystemInit+0x40>)
 800021e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000222:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <SystemInit+0x44>)
 800022c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800022e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000230:	f042 0201 	orr.w	r2, r2, #1
 8000234:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000236:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800023e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000242:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <SystemInit+0x48>)
 8000246:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800024e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000250:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000256:	608b      	str	r3, [r1, #8]
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e000ed00 	.word	0xe000ed00
 8000260:	40023800 	.word	0x40023800
 8000264:	24003010 	.word	0x24003010

08000268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000268:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <HAL_Init+0x30>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000272:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800027a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000282:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000284:	2003      	movs	r0, #3
 8000286:	f000 fb3f 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800028a:	2000      	movs	r0, #0
 800028c:	f002 fe8e 	bl	8002fac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000290:	f002 fd1a 	bl	8002cc8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000294:	2000      	movs	r0, #0
 8000296:	bd08      	pop	{r3, pc}
 8000298:	40023c00 	.word	0x40023c00

0800029c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800029c:	4a02      	ldr	r2, [pc, #8]	; (80002a8 <HAL_IncTick+0xc>)
 800029e:	6813      	ldr	r3, [r2, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20003d6c 	.word	0x20003d6c

080002ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <HAL_GetTick+0x8>)
 80002ae:	6818      	ldr	r0, [r3, #0]
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20003d6c 	.word	0x20003d6c

080002b8 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002b8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002ba:	4604      	mov	r4, r0
 80002bc:	2800      	cmp	r0, #0
 80002be:	f000 809e 	beq.w	80003fe <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80002c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80002c4:	b923      	cbnz	r3, 80002d0 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002c6:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002cc:	f002 fd2c 	bl	8002d28 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80002d2:	06db      	lsls	r3, r3, #27
 80002d4:	f100 808e 	bmi.w	80003f4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80002da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002de:	f023 0302 	bic.w	r3, r3, #2
 80002e2:	f043 0302 	orr.w	r3, r3, #2
 80002e6:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80002e8:	4b46      	ldr	r3, [pc, #280]	; (8000404 <HAL_ADC_Init+0x14c>)
 80002ea:	685a      	ldr	r2, [r3, #4]
 80002ec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80002f0:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80002f2:	6859      	ldr	r1, [r3, #4]
 80002f4:	6862      	ldr	r2, [r4, #4]
 80002f6:	430a      	orrs	r2, r1
 80002f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002fa:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002fc:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002fe:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000300:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000302:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000306:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800030e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000310:	685a      	ldr	r2, [r3, #4]
 8000312:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000316:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000318:	6859      	ldr	r1, [r3, #4]
 800031a:	68a2      	ldr	r2, [r4, #8]
 800031c:	430a      	orrs	r2, r1
 800031e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000320:	689a      	ldr	r2, [r3, #8]
 8000322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000328:	6899      	ldr	r1, [r3, #8]
 800032a:	68e2      	ldr	r2, [r4, #12]
 800032c:	430a      	orrs	r2, r1
 800032e:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000330:	4a35      	ldr	r2, [pc, #212]	; (8000408 <HAL_ADC_Init+0x150>)
 8000332:	4290      	cmp	r0, r2
 8000334:	d00e      	beq.n	8000354 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000336:	6899      	ldr	r1, [r3, #8]
 8000338:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800033c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800033e:	689a      	ldr	r2, [r3, #8]
 8000340:	4302      	orrs	r2, r0
 8000342:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000344:	689a      	ldr	r2, [r3, #8]
 8000346:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800034a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800034c:	6899      	ldr	r1, [r3, #8]
 800034e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000350:	430a      	orrs	r2, r1
 8000352:	e006      	b.n	8000362 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800035a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000362:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000364:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000366:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000368:	f022 0202 	bic.w	r2, r2, #2
 800036c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800036e:	689a      	ldr	r2, [r3, #8]
 8000370:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000374:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000376:	6a22      	ldr	r2, [r4, #32]
 8000378:	b19a      	cbz	r2, 80003a2 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800037a:	685a      	ldr	r2, [r3, #4]
 800037c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000380:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000382:	685a      	ldr	r2, [r3, #4]
 8000384:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000388:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800038a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800038e:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000392:	fab2 f182 	clz	r1, r2
 8000396:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000398:	6858      	ldr	r0, [r3, #4]
 800039a:	3a01      	subs	r2, #1
 800039c:	408a      	lsls	r2, r1
 800039e:	4302      	orrs	r2, r0
 80003a0:	e002      	b.n	80003a8 <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80003a2:	685a      	ldr	r2, [r3, #4]
 80003a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003a8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80003aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80003b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80003b2:	69e2      	ldr	r2, [r4, #28]
 80003b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80003b6:	3a01      	subs	r2, #1
 80003b8:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 80003bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80003be:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80003c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80003c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80003c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80003c8:	689a      	ldr	r2, [r3, #8]
 80003ca:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80003ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80003d0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80003d2:	6961      	ldr	r1, [r4, #20]
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80003d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80003d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80003da:	689a      	ldr	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80003dc:	2000      	movs	r0, #0
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80003de:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80003e2:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80003e4:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003e8:	f023 0303 	bic.w	r3, r3, #3
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6423      	str	r3, [r4, #64]	; 0x40
 80003f2:	e000      	b.n	80003f6 <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80003f4:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80003f6:	2300      	movs	r3, #0
 80003f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80003fc:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80003fe:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8000400:	bd10      	pop	{r4, pc}
 8000402:	bf00      	nop
 8000404:	40012300 	.word	0x40012300
 8000408:	0f000001 	.word	0x0f000001

0800040c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800040c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800040e:	2300      	movs	r3, #0
 8000410:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000412:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000416:	2b01      	cmp	r3, #1
 8000418:	d069      	beq.n	80004ee <HAL_ADC_ConfigChannel+0xe2>
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800041a:	680d      	ldr	r5, [r1, #0]
 800041c:	6804      	ldr	r4, [r0, #0]
 800041e:	688f      	ldr	r7, [r1, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000420:	2301      	movs	r3, #1
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000422:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000424:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000428:	b2ae      	uxth	r6, r5
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800042a:	d910      	bls.n	800044e <HAL_ADC_ConfigChannel+0x42>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800042c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000430:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8000434:	f1a2 031e 	sub.w	r3, r2, #30
 8000438:	2207      	movs	r2, #7
 800043a:	409a      	lsls	r2, r3
 800043c:	ea2e 0202 	bic.w	r2, lr, r2
 8000440:	60e2      	str	r2, [r4, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000442:	68e2      	ldr	r2, [r4, #12]
 8000444:	fa07 f303 	lsl.w	r3, r7, r3
 8000448:	4313      	orrs	r3, r2
 800044a:	60e3      	str	r3, [r4, #12]
 800044c:	e00e      	b.n	800046c <HAL_ADC_ConfigChannel+0x60>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800044e:	6922      	ldr	r2, [r4, #16]
 8000450:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000454:	f04f 0e07 	mov.w	lr, #7
 8000458:	fa0e fe03 	lsl.w	lr, lr, r3
 800045c:	ea22 020e 	bic.w	r2, r2, lr
 8000460:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000462:	6922      	ldr	r2, [r4, #16]
 8000464:	fa07 f303 	lsl.w	r3, r7, r3
 8000468:	4313      	orrs	r3, r2
 800046a:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800046c:	684b      	ldr	r3, [r1, #4]
 800046e:	2b06      	cmp	r3, #6
 8000470:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000474:	d80d      	bhi.n	8000492 <HAL_ADC_ConfigChannel+0x86>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000476:	4413      	add	r3, r2
 8000478:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800047a:	1f59      	subs	r1, r3, #5
 800047c:	231f      	movs	r3, #31
 800047e:	408b      	lsls	r3, r1
 8000480:	ea27 0303 	bic.w	r3, r7, r3
 8000484:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000486:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000488:	fa06 f101 	lsl.w	r1, r6, r1
 800048c:	4311      	orrs	r1, r2
 800048e:	6361      	str	r1, [r4, #52]	; 0x34
 8000490:	e01d      	b.n	80004ce <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000492:	2b0c      	cmp	r3, #12
 8000494:	d80e      	bhi.n	80004b4 <HAL_ADC_ConfigChannel+0xa8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000496:	4413      	add	r3, r2
 8000498:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800049a:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800049e:	231f      	movs	r3, #31
 80004a0:	4093      	lsls	r3, r2
 80004a2:	ea21 0303 	bic.w	r3, r1, r3
 80004a6:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80004a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80004aa:	fa06 f202 	lsl.w	r2, r6, r2
 80004ae:	431a      	orrs	r2, r3
 80004b0:	6322      	str	r2, [r4, #48]	; 0x30
 80004b2:	e00c      	b.n	80004ce <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80004b4:	4413      	add	r3, r2
 80004b6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80004b8:	3b41      	subs	r3, #65	; 0x41
 80004ba:	221f      	movs	r2, #31
 80004bc:	409a      	lsls	r2, r3
 80004be:	ea27 0202 	bic.w	r2, r7, r2
 80004c2:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80004c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80004c6:	fa06 f203 	lsl.w	r2, r6, r3
 80004ca:	430a      	orrs	r2, r1
 80004cc:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <HAL_ADC_ConfigChannel+0x11c>)
 80004d0:	429c      	cmp	r4, r3
 80004d2:	d004      	beq.n	80004de <HAL_ADC_ConfigChannel+0xd2>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80004d4:	2300      	movs	r3, #0
 80004d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80004da:	4618      	mov	r0, r3
 80004dc:	e022      	b.n	8000524 <HAL_ADC_ConfigChannel+0x118>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80004de:	2d12      	cmp	r5, #18
 80004e0:	d107      	bne.n	80004f2 <HAL_ADC_ConfigChannel+0xe6>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <HAL_ADC_ConfigChannel+0x120>)
 80004e4:	6853      	ldr	r3, [r2, #4]
 80004e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004ea:	6053      	str	r3, [r2, #4]
 80004ec:	e001      	b.n	80004f2 <HAL_ADC_ConfigChannel+0xe6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004ee:	2002      	movs	r0, #2
 80004f0:	e018      	b.n	8000524 <HAL_ADC_ConfigChannel+0x118>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80004f2:	f1a5 0310 	sub.w	r3, r5, #16
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d8ec      	bhi.n	80004d4 <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80004fa:	4a0c      	ldr	r2, [pc, #48]	; (800052c <HAL_ADC_ConfigChannel+0x120>)
 80004fc:	6853      	ldr	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80004fe:	2d10      	cmp	r5, #16
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000500:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000504:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000506:	d1e5      	bne.n	80004d4 <HAL_ADC_ConfigChannel+0xc8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <HAL_ADC_ConfigChannel+0x124>)
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <HAL_ADC_ConfigChannel+0x128>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000512:	230a      	movs	r3, #10
 8000514:	4353      	muls	r3, r2
      while(counter != 0U)
      {
        counter--;
 8000516:	9301      	str	r3, [sp, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
      while(counter != 0U)
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0da      	beq.n	80004d4 <HAL_ADC_ConfigChannel+0xc8>
      {
        counter--;
 800051e:	9b01      	ldr	r3, [sp, #4]
 8000520:	3b01      	subs	r3, #1
 8000522:	e7f8      	b.n	8000516 <HAL_ADC_ConfigChannel+0x10a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 8000524:	b003      	add	sp, #12
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000528:	40012000 	.word	0x40012000
 800052c:	40012300 	.word	0x40012300
 8000530:	20000000 	.word	0x20000000
 8000534:	000f4240 	.word	0x000f4240

08000538 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000538:	b570      	push	{r4, r5, r6, lr}
  uint32_t InitStatus = 3U;
  uint32_t tickstart = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 800053a:	4604      	mov	r4, r0
 800053c:	2800      	cmp	r0, #0
 800053e:	f000 808f 	beq.w	8000660 <HAL_CAN_Init+0x128>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000542:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000546:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800054a:	b91b      	cbnz	r3, 8000554 <HAL_CAN_Init+0x1c>
  {    
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 800054c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000550:	f002 fc2e 	bl	8002db0 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000554:	2302      	movs	r3, #2
 8000556:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 800055a:	6823      	ldr	r3, [r4, #0]
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	f022 0202 	bic.w	r2, r2, #2
 8000562:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	f042 0201 	orr.w	r2, r2, #1
 800056a:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800056c:	f7ff fe9e 	bl	80002ac <HAL_GetTick>
 8000570:	4606      	mov	r6, r0

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000572:	6823      	ldr	r3, [r4, #0]
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	f012 0501 	ands.w	r5, r2, #1
 800057a:	d10a      	bne.n	8000592 <HAL_CAN_Init+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 800057c:	f7ff fe96 	bl	80002ac <HAL_GetTick>
 8000580:	1b80      	subs	r0, r0, r6
 8000582:	280a      	cmp	r0, #10
 8000584:	d9f5      	bls.n	8000572 <HAL_CAN_Init+0x3a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000586:	2003      	movs	r0, #3
 8000588:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 800058c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
      return HAL_TIMEOUT;
 8000590:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000592:	685a      	ldr	r2, [r3, #4]
 8000594:	07d1      	lsls	r1, r2, #31
 8000596:	d560      	bpl.n	800065a <HAL_CAN_Init+0x122>
    InitStatus = CAN_INITSTATUS_FAILED;
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000598:	69a2      	ldr	r2, [r4, #24]
 800059a:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	bf0c      	ite	eq
 80005a0:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80005a4:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80005aa:	69e2      	ldr	r2, [r4, #28]
 80005ac:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	bf0c      	ite	eq
 80005b2:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 80005b6:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80005ba:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80005bc:	6a22      	ldr	r2, [r4, #32]
 80005be:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	bf0c      	ite	eq
 80005c4:	f042 0220 	orreq.w	r2, r2, #32
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80005c8:	f022 0220 	bicne.w	r2, r2, #32
 80005cc:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80005ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80005d0:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	bf0c      	ite	eq
 80005d6:	f042 0210 	orreq.w	r2, r2, #16
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 80005da:	f022 0210 	bicne.w	r2, r2, #16
 80005de:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80005e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005e2:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	bf0c      	ite	eq
 80005e8:	f042 0208 	orreq.w	r2, r2, #8
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80005ec:	f022 0208 	bicne.w	r2, r2, #8
 80005f0:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 80005f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80005f4:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	bf0c      	ite	eq
 80005fa:	f042 0204 	orreq.w	r2, r2, #4
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 80005fe:	f022 0204 	bicne.w	r2, r2, #4
 8000602:	601a      	str	r2, [r3, #0]

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
                ((uint32_t)hcan->Init.SJW) | \
                ((uint32_t)hcan->Init.BS1) | \
                ((uint32_t)hcan->Init.BS2) | \
 8000604:	68e2      	ldr	r2, [r4, #12]
 8000606:	68a1      	ldr	r1, [r4, #8]
 8000608:	4311      	orrs	r1, r2
 800060a:	6922      	ldr	r2, [r4, #16]
 800060c:	4311      	orrs	r1, r2
 800060e:	6962      	ldr	r2, [r4, #20]
 8000610:	4311      	orrs	r1, r2
 8000612:	6862      	ldr	r2, [r4, #4]
 8000614:	3a01      	subs	r2, #1
 8000616:	430a      	orrs	r2, r1
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000618:	61da      	str	r2, [r3, #28]
                ((uint32_t)hcan->Init.BS1) | \
                ((uint32_t)hcan->Init.BS2) | \
               ((uint32_t)hcan->Init.Prescaler - 1U);

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	f022 0201 	bic.w	r2, r2, #1
 8000620:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000622:	f7ff fe43 	bl	80002ac <HAL_GetTick>
 8000626:	4605      	mov	r5, r0

   /* Wait the acknowledge */
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000628:	6823      	ldr	r3, [r4, #0]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	07d2      	lsls	r2, r2, #31
 800062e:	d50b      	bpl.n	8000648 <HAL_CAN_Init+0x110>
   {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000630:	f7ff fe3c 	bl	80002ac <HAL_GetTick>
 8000634:	1b40      	subs	r0, r0, r5
 8000636:	280a      	cmp	r0, #10
 8000638:	d9f6      	bls.n	8000628 <HAL_CAN_Init+0xf0>
     {
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 800063a:	2003      	movs	r0, #3
       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 800063c:	2300      	movs	r3, #0
   /* Wait the acknowledge */
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
   {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
     {
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 800063e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 8000642:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
       return HAL_TIMEOUT;
 8000646:	bd70      	pop	{r4, r5, r6, pc}
     }
   }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000648:	6858      	ldr	r0, [r3, #4]
 800064a:	f010 0001 	ands.w	r0, r0, #1
 800064e:	d104      	bne.n	800065a <HAL_CAN_Init+0x122>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000650:	2301      	movs	r3, #1
  }
 
  if(InitStatus == CAN_INITSTATUS_SUCCESS)
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000652:	63e0      	str	r0, [r4, #60]	; 0x3c
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000654:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
    /* Return function status */
    return HAL_OK;
 8000658:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 800065a:	2304      	movs	r3, #4
 800065c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    
    /* Return function status */
    return HAL_ERROR;
 8000660:	2001      	movs	r0, #1
  }
}
 8000662:	bd70      	pop	{r4, r5, r6, pc}

08000664 <HAL_CAN_TxCpltCallback>:
 8000664:	4770      	bx	lr

08000666 <HAL_CAN_RxCpltCallback>:
 8000666:	4770      	bx	lr

08000668 <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000668:	b538      	push	{r3, r4, r5, lr}
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 800066a:	6804      	ldr	r4, [r0, #0]
 800066c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800066e:	eb04 1301 	add.w	r3, r4, r1, lsl #4
 8000672:	f8d3 51b0 	ldr.w	r5, [r3, #432]	; 0x1b0
 8000676:	f005 0504 	and.w	r5, r5, #4
 800067a:	6095      	str	r5, [r2, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
 800067c:	b925      	cbnz	r5, 8000688 <CAN_Receive_IT+0x20>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21U);
 800067e:	f8d3 51b0 	ldr.w	r5, [r3, #432]	; 0x1b0
 8000682:	0d6d      	lsrs	r5, r5, #21
 8000684:	6015      	str	r5, [r2, #0]
 8000686:	e003      	b.n	8000690 <CAN_Receive_IT+0x28>
  }
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
 8000688:	f8d3 51b0 	ldr.w	r5, [r3, #432]	; 0x1b0
 800068c:	08ed      	lsrs	r5, r5, #3
 800068e:	6055      	str	r5, [r2, #4]
  }
  
  hcan->pRxMsg->RTR = (uint8_t)0x02U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000690:	f8d3 51b0 	ldr.w	r5, [r3, #432]	; 0x1b0
 8000694:	f005 0502 	and.w	r5, r5, #2
 8000698:	60d5      	str	r5, [r2, #12]
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0FU & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 800069a:	f8d3 51b4 	ldr.w	r5, [r3, #436]	; 0x1b4
  /* Get the FIFONumber */
  hcan->pRxMsg->FIFONumber = FIFONumber;
 800069e:	6211      	str	r1, [r2, #32]
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
  }
  
  hcan->pRxMsg->RTR = (uint8_t)0x02U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0FU & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 80006a0:	f005 050f 	and.w	r5, r5, #15
 80006a4:	6115      	str	r5, [r2, #16]
  /* Get the FIFONumber */
  hcan->pRxMsg->FIFONumber = FIFONumber;
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 80006a6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80006aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80006ae:	61d3      	str	r3, [r2, #28]
  /* Get the data field */
  hcan->pRxMsg->Data[0U] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 80006b0:	010b      	lsls	r3, r1, #4
 80006b2:	441c      	add	r4, r3
 80006b4:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80006b8:	7514      	strb	r4, [r2, #20]
  hcan->pRxMsg->Data[1U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8U);
 80006ba:	6802      	ldr	r2, [r0, #0]
 80006bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80006be:	441a      	add	r2, r3
 80006c0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80006c4:	0a12      	lsrs	r2, r2, #8
 80006c6:	7562      	strb	r2, [r4, #21]
  hcan->pRxMsg->Data[2U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16U);
 80006c8:	6802      	ldr	r2, [r0, #0]
 80006ca:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80006cc:	441a      	add	r2, r3
 80006ce:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80006d2:	0c12      	lsrs	r2, r2, #16
 80006d4:	75a2      	strb	r2, [r4, #22]
  hcan->pRxMsg->Data[3U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24U);
 80006d6:	6802      	ldr	r2, [r0, #0]
 80006d8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80006da:	441a      	add	r2, r3
 80006dc:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80006e0:	0e12      	lsrs	r2, r2, #24
 80006e2:	75e2      	strb	r2, [r4, #23]
  hcan->pRxMsg->Data[4U] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 80006e4:	6802      	ldr	r2, [r0, #0]
 80006e6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80006e8:	441a      	add	r2, r3
 80006ea:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80006ee:	7622      	strb	r2, [r4, #24]
  hcan->pRxMsg->Data[5U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8U);
 80006f0:	6802      	ldr	r2, [r0, #0]
 80006f2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80006f4:	441a      	add	r2, r3
 80006f6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80006fa:	0a12      	lsrs	r2, r2, #8
 80006fc:	7662      	strb	r2, [r4, #25]
  hcan->pRxMsg->Data[6U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16U);
 80006fe:	6802      	ldr	r2, [r0, #0]
 8000700:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000702:	441a      	add	r2, r3
 8000704:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000708:	0c12      	lsrs	r2, r2, #16
 800070a:	76a2      	strb	r2, [r4, #26]
  hcan->pRxMsg->Data[7U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24U);
 800070c:	6804      	ldr	r4, [r0, #0]
 800070e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8000710:	4423      	add	r3, r4
 8000712:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000716:	0e1b      	lsrs	r3, r3, #24
 8000718:	76d3      	strb	r3, [r2, #27]
 800071a:	6803      	ldr	r3, [r0, #0]
 800071c:	2220      	movs	r2, #32
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800071e:	b921      	cbnz	r1, 800072a <CAN_Receive_IT+0xc2>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000720:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
 8000722:	695a      	ldr	r2, [r3, #20]
 8000724:	f022 0202 	bic.w	r2, r2, #2
 8000728:	e003      	b.n	8000732 <CAN_Receive_IT+0xca>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 800072a:	611a      	str	r2, [r3, #16]
    
    /* Disable FIFO 1 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 800072c:	695a      	ldr	r2, [r3, #20]
 800072e:	f022 0210 	bic.w	r2, r2, #16
 8000732:	615a      	str	r2, [r3, #20]
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 8000734:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8000738:	2a22      	cmp	r2, #34	; 0x22
 800073a:	d113      	bne.n	8000764 <CAN_Receive_IT+0xfc>
  {   
    /* Disable Error warning Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG);
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000742:	615a      	str	r2, [r3, #20]
    
    /* Disable Error passive Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EPV);
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800074a:	615a      	str	r2, [r3, #20]
    
    /* Disable Bus-off Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_BOF);
 800074c:	695a      	ldr	r2, [r3, #20]
 800074e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000752:	615a      	str	r2, [r3, #20]
    
    /* Disable Last error code Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_LEC);
 8000754:	695a      	ldr	r2, [r3, #20]
 8000756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800075a:	615a      	str	r2, [r3, #20]
    
    /* Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_ERR);
 800075c:	695a      	ldr	r2, [r3, #20]
 800075e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000762:	615a      	str	r2, [r3, #20]
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8000764:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000768:	2b32      	cmp	r3, #50	; 0x32
  {
    /* Disable CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 800076a:	bf0c      	ite	eq
 800076c:	2312      	moveq	r3, #18
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 800076e:	2301      	movne	r3, #1
 8000770:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8000774:	f7ff ff77 	bl	8000666 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 8000778:	2000      	movs	r0, #0
 800077a:	bd38      	pop	{r3, r4, r5, pc}

0800077c <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800077c:	4770      	bx	lr
	...

08000780 <HAL_CAN_IRQHandler>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 8000780:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U;
  
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000782:	6803      	ldr	r3, [r0, #0]
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	07d5      	lsls	r5, r2, #31
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 8000788:	4604      	mov	r4, r0
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U;
  
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 800078a:	d538      	bpl.n	80007fe <HAL_CAN_IRQHandler+0x7e>
  {
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
 800078c:	689d      	ldr	r5, [r3, #8]
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 800078e:	4a5b      	ldr	r2, [pc, #364]	; (80008fc <HAL_CAN_IRQHandler+0x17c>)
 8000790:	6899      	ldr	r1, [r3, #8]
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
 8000792:	6898      	ldr	r0, [r3, #8]
  
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
  {
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 8000794:	400a      	ands	r2, r1
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
    if(tmp1 || tmp2 || tmp3)  
 8000796:	495a      	ldr	r1, [pc, #360]	; (8000900 <HAL_CAN_IRQHandler+0x180>)
 8000798:	4029      	ands	r1, r5
 800079a:	4d59      	ldr	r5, [pc, #356]	; (8000900 <HAL_CAN_IRQHandler+0x180>)
 800079c:	42a9      	cmp	r1, r5
 800079e:	d007      	beq.n	80007b0 <HAL_CAN_IRQHandler+0x30>
 80007a0:	4956      	ldr	r1, [pc, #344]	; (80008fc <HAL_CAN_IRQHandler+0x17c>)
 80007a2:	428a      	cmp	r2, r1
 80007a4:	d004      	beq.n	80007b0 <HAL_CAN_IRQHandler+0x30>
 80007a6:	4a57      	ldr	r2, [pc, #348]	; (8000904 <HAL_CAN_IRQHandler+0x184>)
 80007a8:	4956      	ldr	r1, [pc, #344]	; (8000904 <HAL_CAN_IRQHandler+0x184>)
 80007aa:	4002      	ands	r2, r0
 80007ac:	428a      	cmp	r2, r1
 80007ae:	d126      	bne.n	80007fe <HAL_CAN_IRQHandler+0x7e>
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 80007b0:	695a      	ldr	r2, [r3, #20]
 80007b2:	f022 0201 	bic.w	r2, r2, #1
 80007b6:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 80007b8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80007bc:	2a12      	cmp	r2, #18
 80007be:	d113      	bne.n	80007e8 <HAL_CAN_IRQHandler+0x68>
  {   
    /* Disable Error warning Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG);
 80007c0:	695a      	ldr	r2, [r3, #20]
 80007c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80007c6:	615a      	str	r2, [r3, #20]
    
    /* Disable Error passive Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EPV);
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80007ce:	615a      	str	r2, [r3, #20]
    
    /* Disable Bus-off Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_BOF);
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80007d6:	615a      	str	r2, [r3, #20]
    
    /* Disable Last error code Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_LEC);
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007de:	615a      	str	r2, [r3, #20]
    
    /* Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_ERR);
 80007e0:	695a      	ldr	r2, [r3, #20]
 80007e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80007e6:	615a      	str	r2, [r3, #20]
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 80007e8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80007ec:	2b32      	cmp	r3, #50	; 0x32
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_RX;
 80007ee:	bf0c      	ite	eq
 80007f0:	2322      	moveq	r3, #34	; 0x22
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80007f2:	2301      	movne	r3, #1
 80007f4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  }
  
  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff ff33 	bl	8000664 <HAL_CAN_TxCpltCallback>
      /* Call transmit function */
      CAN_Transmit_IT(hcan);
    }
  }
  
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	68da      	ldr	r2, [r3, #12]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
 8000802:	695b      	ldr	r3, [r3, #20]
  /* Check End of reception flag for FIFO0 */
  if((tmp1 != 0U) && tmp2)
 8000804:	0790      	lsls	r0, r2, #30
 8000806:	d005      	beq.n	8000814 <HAL_CAN_IRQHandler+0x94>
 8000808:	0799      	lsls	r1, r3, #30
 800080a:	d503      	bpl.n	8000814 <HAL_CAN_IRQHandler+0x94>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 800080c:	2100      	movs	r1, #0
 800080e:	4620      	mov	r0, r4
 8000810:	f7ff ff2a 	bl	8000668 <CAN_Receive_IT>
  }
  
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	691a      	ldr	r2, [r3, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
 8000818:	695b      	ldr	r3, [r3, #20]
  /* Check End of reception flag for FIFO1 */
  if((tmp1 != 0U) && tmp2)
 800081a:	0792      	lsls	r2, r2, #30
 800081c:	d005      	beq.n	800082a <HAL_CAN_IRQHandler+0xaa>
 800081e:	06dd      	lsls	r5, r3, #27
 8000820:	d503      	bpl.n	800082a <HAL_CAN_IRQHandler+0xaa>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000822:	2101      	movs	r1, #1
 8000824:	4620      	mov	r0, r4
 8000826:	f7ff ff1f 	bl	8000668 <CAN_Receive_IT>
  }
  
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
 800082e:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8000830:	695a      	ldr	r2, [r3, #20]
  /* Check Error Warning Flag */
  if(tmp1 && tmp2 && tmp3)
 8000832:	07c0      	lsls	r0, r0, #31
 8000834:	d507      	bpl.n	8000846 <HAL_CAN_IRQHandler+0xc6>
 8000836:	05c9      	lsls	r1, r1, #23
 8000838:	d505      	bpl.n	8000846 <HAL_CAN_IRQHandler+0xc6>
 800083a:	0415      	lsls	r5, r2, #16
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 800083c:	bf42      	ittt	mi
 800083e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000840:	f042 0201 	orrmi.w	r2, r2, #1
 8000844:	63e2      	strmi	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
 8000846:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
 8000848:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
 800084a:	695a      	ldr	r2, [r3, #20]
  /* Check Error Passive Flag */
  if(tmp1 && tmp2 && tmp3)
 800084c:	0780      	lsls	r0, r0, #30
 800084e:	d507      	bpl.n	8000860 <HAL_CAN_IRQHandler+0xe0>
 8000850:	0589      	lsls	r1, r1, #22
 8000852:	d505      	bpl.n	8000860 <HAL_CAN_IRQHandler+0xe0>
 8000854:	0415      	lsls	r5, r2, #16
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000856:	bf42      	ittt	mi
 8000858:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800085a:	f042 0202 	orrmi.w	r2, r2, #2
 800085e:	63e2      	strmi	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
 8000860:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
 8000862:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
 8000864:	695a      	ldr	r2, [r3, #20]
  /* Check Bus-Off Flag */
  if(tmp1 && tmp2 && tmp3)
 8000866:	0740      	lsls	r0, r0, #29
 8000868:	d507      	bpl.n	800087a <HAL_CAN_IRQHandler+0xfa>
 800086a:	054d      	lsls	r5, r1, #21
 800086c:	d505      	bpl.n	800087a <HAL_CAN_IRQHandler+0xfa>
 800086e:	0410      	lsls	r0, r2, #16
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000870:	bf42      	ittt	mi
 8000872:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000874:	f042 0204 	orrmi.w	r2, r2, #4
 8000878:	63e2      	strmi	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
 800087a:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
 800087c:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 800087e:	695a      	ldr	r2, [r3, #20]
  /* Check Last error code Flag */
  if((!tmp1) && tmp2 && tmp3)
 8000880:	f010 0f70 	tst.w	r0, #112	; 0x70
 8000884:	d02f      	beq.n	80008e6 <HAL_CAN_IRQHandler+0x166>
 8000886:	0509      	lsls	r1, r1, #20
 8000888:	d52d      	bpl.n	80008e6 <HAL_CAN_IRQHandler+0x166>
 800088a:	0412      	lsls	r2, r2, #16
 800088c:	d52b      	bpl.n	80008e6 <HAL_CAN_IRQHandler+0x166>
  {
    tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
 800088e:	699a      	ldr	r2, [r3, #24]
    switch(tmp1)
 8000890:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000894:	2a30      	cmp	r2, #48	; 0x30
 8000896:	d016      	beq.n	80008c6 <HAL_CAN_IRQHandler+0x146>
 8000898:	d807      	bhi.n	80008aa <HAL_CAN_IRQHandler+0x12a>
 800089a:	2a10      	cmp	r2, #16
 800089c:	d00f      	beq.n	80008be <HAL_CAN_IRQHandler+0x13e>
 800089e:	2a20      	cmp	r2, #32
 80008a0:	d11d      	bne.n	80008de <HAL_CAN_IRQHandler+0x15e>
          /* Set CAN error code to STF error */
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
          break;
      case(CAN_ESR_LEC_1):
          /* Set CAN error code to FOR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 80008a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008a4:	f042 0210 	orr.w	r2, r2, #16
 80008a8:	e018      	b.n	80008dc <HAL_CAN_IRQHandler+0x15c>
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
  /* Check Last error code Flag */
  if((!tmp1) && tmp2 && tmp3)
  {
    tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
    switch(tmp1)
 80008aa:	2a50      	cmp	r2, #80	; 0x50
 80008ac:	d00f      	beq.n	80008ce <HAL_CAN_IRQHandler+0x14e>
 80008ae:	2a60      	cmp	r2, #96	; 0x60
 80008b0:	d011      	beq.n	80008d6 <HAL_CAN_IRQHandler+0x156>
 80008b2:	2a40      	cmp	r2, #64	; 0x40
 80008b4:	d113      	bne.n	80008de <HAL_CAN_IRQHandler+0x15e>
          /* Set CAN error code to ACK error */
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
          break;
      case(CAN_ESR_LEC_2):
          /* Set CAN error code to BR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 80008b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008bc:	e00e      	b.n	80008dc <HAL_CAN_IRQHandler+0x15c>
    tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
    switch(tmp1)
    {
      case(CAN_ESR_LEC_0):
          /* Set CAN error code to STF error */
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 80008be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008c0:	f042 0208 	orr.w	r2, r2, #8
 80008c4:	e00a      	b.n	80008dc <HAL_CAN_IRQHandler+0x15c>
          /* Set CAN error code to FOR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
          break;
      case(CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
          /* Set CAN error code to ACK error */
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 80008c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008c8:	f042 0220 	orr.w	r2, r2, #32
 80008cc:	e006      	b.n	80008dc <HAL_CAN_IRQHandler+0x15c>
          /* Set CAN error code to BR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
          break;
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
          /* Set CAN error code to BD error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 80008ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008d4:	e002      	b.n	80008dc <HAL_CAN_IRQHandler+0x15c>
          break;
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 80008d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008dc:	63e2      	str	r2, [r4, #60]	; 0x3c
      default:
          break;
    }

    /* Clear Last error code Flag */ 
    hcan->Instance->ESR &= ~(CAN_ESR_LEC);
 80008de:	699a      	ldr	r2, [r3, #24]
 80008e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80008e4:	619a      	str	r2, [r3, #24]
  }
  
  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 80008e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008e8:	b13a      	cbz	r2, 80008fa <HAL_CAN_IRQHandler+0x17a>
  {
    /* Clear ERRI Flag */ 
    hcan->Instance->MSR = CAN_MSR_ERRI; 
 80008ea:	2204      	movs	r2, #4
 80008ec:	605a      	str	r2, [r3, #4]
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 80008ee:	2301      	movs	r3, #1
 80008f0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 80008f4:	4620      	mov	r0, r4
 80008f6:	f7ff ff41 	bl	800077c <HAL_CAN_ErrorCallback>
 80008fa:	bd38      	pop	{r3, r4, r5, pc}
 80008fc:	08000300 	.word	0x08000300
 8000900:	04000003 	.word	0x04000003
 8000904:	10030000 	.word	0x10030000

08000908 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800090a:	68d3      	ldr	r3, [r2, #12]
 800090c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000910:	041b      	lsls	r3, r3, #16
 8000912:	0c1b      	lsrs	r3, r3, #16
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000918:	0200      	lsls	r0, r0, #8
 800091a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000922:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000924:	60d3      	str	r3, [r2, #12]
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_NVIC_SetPriority+0x60>)
 800092e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000934:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000936:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	2c04      	cmp	r4, #4
 800093e:	bf28      	it	cs
 8000940:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000942:	2d06      	cmp	r5, #6

  return (
 8000944:	f04f 0501 	mov.w	r5, #1
 8000948:	fa05 f404 	lsl.w	r4, r5, r4
 800094c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000950:	bf8c      	ite	hi
 8000952:	3b03      	subhi	r3, #3
 8000954:	2300      	movls	r3, #0

  return (
 8000956:	400c      	ands	r4, r1
 8000958:	409c      	lsls	r4, r3
 800095a:	fa05 f303 	lsl.w	r3, r5, r3
 800095e:	3b01      	subs	r3, #1
 8000960:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000962:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000964:	ea42 0204 	orr.w	r2, r2, r4
 8000968:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	bfaf      	iteee	ge
 800096e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	f000 000f 	andlt.w	r0, r0, #15
 8000976:	4b06      	ldrlt	r3, [pc, #24]	; (8000990 <HAL_NVIC_SetPriority+0x64>)
 8000978:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	bfa5      	ittet	ge
 800097c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000980:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000988:	bd30      	pop	{r4, r5, pc}
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00
 8000990:	e000ed14 	.word	0xe000ed14

08000994 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000994:	0942      	lsrs	r2, r0, #5
 8000996:	2301      	movs	r3, #1
 8000998:	f000 001f 	and.w	r0, r0, #31
 800099c:	fa03 f000 	lsl.w	r0, r3, r0
 80009a0:	4b01      	ldr	r3, [pc, #4]	; (80009a8 <HAL_NVIC_EnableIRQ+0x14>)
 80009a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100

080009ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	3801      	subs	r0, #1
 80009ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009b2:	d20a      	bcs.n	80009ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b8:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	21f0      	movs	r1, #240	; 0xf0
 80009bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009da:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80009dc:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009de:	bf0c      	ite	eq
 80009e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009e4:	f022 0204 	bicne.w	r2, r2, #4
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	4770      	bx	lr
 80009ec:	e000e010 	.word	0xe000e010

080009f0 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80009f0:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80009f2:	4604      	mov	r4, r0
 80009f4:	b168      	cbz	r0, 8000a12 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80009f6:	7903      	ldrb	r3, [r0, #4]
 80009f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009fc:	b913      	cbnz	r3, 8000a04 <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80009fe:	7142      	strb	r2, [r0, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000a00:	f002 fa06 	bl	8002e10 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a04:	2302      	movs	r3, #2
 8000a06:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000a08:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000a0a:	2301      	movs	r3, #1
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000a0c:	6120      	str	r0, [r4, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000a0e:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000a10:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
  {
     return HAL_ERROR;
 8000a12:	2001      	movs	r0, #1
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8000a14:	bd10      	pop	{r4, pc}

08000a16 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000a16:	7943      	ldrb	r3, [r0, #5]
 8000a18:	2b01      	cmp	r3, #1
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000a1a:	b570      	push	{r4, r5, r6, lr}
 8000a1c:	f04f 0302 	mov.w	r3, #2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000a20:	d018      	beq.n	8000a54 <HAL_DAC_ConfigChannel+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000a22:	6806      	ldr	r6, [r0, #0]
  
  /* Process locked */
  __HAL_LOCK(hdac);
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a24:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000a26:	6835      	ldr	r5, [r6, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000a28:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000a2c:	4093      	lsls	r3, r2
 8000a2e:	ea25 0403 	bic.w	r4, r5, r3
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000a32:	e891 0028 	ldmia.w	r1, {r3, r5}
 8000a36:	432b      	orrs	r3, r5
 8000a38:	4093      	lsls	r3, r2
 8000a3a:	4323      	orrs	r3, r4
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000a3c:	6033      	str	r3, [r6, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000a3e:	6833      	ldr	r3, [r6, #0]
 8000a40:	21c0      	movs	r1, #192	; 0xc0
 8000a42:	fa01 f202 	lsl.w	r2, r1, r2
 8000a46:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000a4a:	2301      	movs	r3, #1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000a4c:	6032      	str	r2, [r6, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000a4e:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000a50:	2300      	movs	r3, #0
 8000a52:	7143      	strb	r3, [r0, #5]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000a54:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
  
  /* Return function status */
  return HAL_OK;
}
 8000a56:	bd70      	pop	{r4, r5, r6, pc}

08000a58 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a58:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d003      	beq.n	8000a68 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000a64:	2001      	movs	r0, #1
 8000a66:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a68:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a70:	6813      	ldr	r3, [r2, #0]
 8000a72:	f023 0301 	bic.w	r3, r3, #1
 8000a76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000a78:	2000      	movs	r0, #0
}
 8000a7a:	4770      	bx	lr

08000a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a80:	4f6a      	ldr	r7, [pc, #424]	; (8000c2c <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a82:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a84:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8000c34 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a88:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000c38 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a8c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a8e:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000a94:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000a96:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000a98:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000a9a:	ea34 0303 	bics.w	r3, r4, r3
 8000a9e:	f040 80bd 	bne.w	8000c1c <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aa2:	684d      	ldr	r5, [r1, #4]
 8000aa4:	f025 0a10 	bic.w	sl, r5, #16
 8000aa8:	f1ba 0f02 	cmp.w	sl, #2
 8000aac:	d114      	bne.n	8000ad8 <HAL_GPIO_Init+0x5c>
 8000aae:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8000ab2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000ab6:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000aba:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000abe:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	fa03 f30b 	lsl.w	r3, r3, fp
 8000ac8:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000acc:	690b      	ldr	r3, [r1, #16]
 8000ace:	fa03 f30b 	lsl.w	r3, r3, fp
 8000ad2:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000ad4:	f8c9 3020 	str.w	r3, [r9, #32]
 8000ad8:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000adc:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae0:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ae2:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ae6:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aea:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000aee:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000af2:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af6:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000afa:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000afc:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000b00:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b02:	d80f      	bhi.n	8000b24 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b04:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b06:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b08:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b0c:	fa06 f60b 	lsl.w	r6, r6, fp
 8000b10:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8000b12:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b14:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b16:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1a:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b1e:	4096      	lsls	r6, r2
 8000b20:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000b22:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b24:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b26:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b2a:	688b      	ldr	r3, [r1, #8]
 8000b2c:	fa03 f30b 	lsl.w	r3, r3, fp
 8000b30:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000b34:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b36:	00eb      	lsls	r3, r5, #3
 8000b38:	d570      	bpl.n	8000c1c <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9303      	str	r3, [sp, #12]
 8000b3e:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b42:	4b3b      	ldr	r3, [pc, #236]	; (8000c30 <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b44:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b48:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000b4c:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000b50:	f022 0903 	bic.w	r9, r2, #3
 8000b54:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000b58:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000b5c:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000b60:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000b62:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b68:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000b6c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000b70:	260f      	movs	r6, #15
 8000b72:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b76:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000b78:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b7c:	d01c      	beq.n	8000bb8 <HAL_GPIO_Init+0x13c>
 8000b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d01a      	beq.n	8000bbc <HAL_GPIO_Init+0x140>
 8000b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d018      	beq.n	8000bc0 <HAL_GPIO_Init+0x144>
 8000b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d016      	beq.n	8000bc4 <HAL_GPIO_Init+0x148>
 8000b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b9a:	4298      	cmp	r0, r3
 8000b9c:	d014      	beq.n	8000bc8 <HAL_GPIO_Init+0x14c>
 8000b9e:	4540      	cmp	r0, r8
 8000ba0:	d014      	beq.n	8000bcc <HAL_GPIO_Init+0x150>
 8000ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ba6:	4298      	cmp	r0, r3
 8000ba8:	d012      	beq.n	8000bd0 <HAL_GPIO_Init+0x154>
 8000baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bae:	4298      	cmp	r0, r3
 8000bb0:	bf14      	ite	ne
 8000bb2:	2308      	movne	r3, #8
 8000bb4:	2307      	moveq	r3, #7
 8000bb6:	e00c      	b.n	8000bd2 <HAL_GPIO_Init+0x156>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e00a      	b.n	8000bd2 <HAL_GPIO_Init+0x156>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e008      	b.n	8000bd2 <HAL_GPIO_Init+0x156>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e006      	b.n	8000bd2 <HAL_GPIO_Init+0x156>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e004      	b.n	8000bd2 <HAL_GPIO_Init+0x156>
 8000bc8:	2304      	movs	r3, #4
 8000bca:	e002      	b.n	8000bd2 <HAL_GPIO_Init+0x156>
 8000bcc:	2305      	movs	r3, #5
 8000bce:	e000      	b.n	8000bd2 <HAL_GPIO_Init+0x156>
 8000bd0:	2306      	movs	r3, #6
 8000bd2:	fa03 f30a 	lsl.w	r3, r3, sl
 8000bd6:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bd8:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bdc:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bde:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be0:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000be4:	bf0c      	ite	eq
 8000be6:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000be8:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8000bea:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000bee:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf2:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000bf6:	bf0c      	ite	eq
 8000bf8:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000bfa:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8000bfc:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bfe:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c00:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000c04:	bf0c      	ite	eq
 8000c06:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000c08:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8000c0a:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000c0e:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c12:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000c14:	bf54      	ite	pl
 8000c16:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000c18:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8000c1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c1c:	3201      	adds	r2, #1
 8000c1e:	2a10      	cmp	r2, #16
 8000c20:	f47f af38 	bne.w	8000a94 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000c24:	b005      	add	sp, #20
 8000c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40013c00 	.word	0x40013c00
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40021400 	.word	0x40021400

08000c3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c3c:	b902      	cbnz	r2, 8000c40 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c3e:	0409      	lsls	r1, r1, #16
 8000c40:	6181      	str	r1, [r0, #24]
 8000c42:	4770      	bx	lr

08000c44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c44:	4770      	bx	lr
	...

08000c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c48:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000c4c:	6959      	ldr	r1, [r3, #20]
 8000c4e:	4201      	tst	r1, r0
 8000c50:	d002      	beq.n	8000c58 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c52:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c54:	f7ff fff6 	bl	8000c44 <HAL_GPIO_EXTI_Callback>
 8000c58:	bd08      	pop	{r3, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40013c00 	.word	0x40013c00

08000c60 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c60:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000c66:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c68:	07d8      	lsls	r0, r3, #31
 8000c6a:	d403      	bmi.n	8000c74 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c6c:	6823      	ldr	r3, [r4, #0]
 8000c6e:	0799      	lsls	r1, r3, #30
 8000c70:	d437      	bmi.n	8000ce2 <HAL_RCC_OscConfig+0x82>
 8000c72:	e087      	b.n	8000d84 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c74:	4ba7      	ldr	r3, [pc, #668]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	f002 020c 	and.w	r2, r2, #12
 8000c7c:	2a04      	cmp	r2, #4
 8000c7e:	d007      	beq.n	8000c90 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c80:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c82:	f002 020c 	and.w	r2, r2, #12
 8000c86:	2a08      	cmp	r2, #8
 8000c88:	d10b      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	025a      	lsls	r2, r3, #9
 8000c8e:	d508      	bpl.n	8000ca2 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c90:	4ba0      	ldr	r3, [pc, #640]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	039b      	lsls	r3, r3, #14
 8000c96:	d5e9      	bpl.n	8000c6c <HAL_RCC_OscConfig+0xc>
 8000c98:	6863      	ldr	r3, [r4, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1e6      	bne.n	8000c6c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	e134      	b.n	8000f0c <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca2:	4b9d      	ldr	r3, [pc, #628]	; (8000f18 <HAL_RCC_OscConfig+0x2b8>)
 8000ca4:	7922      	ldrb	r2, [r4, #4]
 8000ca6:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ca8:	6863      	ldr	r3, [r4, #4]
 8000caa:	b16b      	cbz	r3, 8000cc8 <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cac:	f7ff fafe 	bl	80002ac <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb0:	4d98      	ldr	r5, [pc, #608]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb2:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	039f      	lsls	r7, r3, #14
 8000cb8:	d4d8      	bmi.n	8000c6c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cba:	f7ff faf7 	bl	80002ac <HAL_GetTick>
 8000cbe:	1b80      	subs	r0, r0, r6
 8000cc0:	2864      	cmp	r0, #100	; 0x64
 8000cc2:	d9f7      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	e121      	b.n	8000f0c <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc8:	f7ff faf0 	bl	80002ac <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ccc:	4d91      	ldr	r5, [pc, #580]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cce:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd0:	682b      	ldr	r3, [r5, #0]
 8000cd2:	0398      	lsls	r0, r3, #14
 8000cd4:	d5ca      	bpl.n	8000c6c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd6:	f7ff fae9 	bl	80002ac <HAL_GetTick>
 8000cda:	1b80      	subs	r0, r0, r6
 8000cdc:	2864      	cmp	r0, #100	; 0x64
 8000cde:	d9f7      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x70>
 8000ce0:	e7f0      	b.n	8000cc4 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ce2:	4b8c      	ldr	r3, [pc, #560]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	f012 0f0c 	tst.w	r2, #12
 8000cea:	d007      	beq.n	8000cfc <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cec:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cee:	f002 020c 	and.w	r2, r2, #12
 8000cf2:	2a08      	cmp	r2, #8
 8000cf4:	d117      	bne.n	8000d26 <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	0259      	lsls	r1, r3, #9
 8000cfa:	d414      	bmi.n	8000d26 <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cfc:	4b85      	ldr	r3, [pc, #532]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	0792      	lsls	r2, r2, #30
 8000d02:	d502      	bpl.n	8000d0a <HAL_RCC_OscConfig+0xaa>
 8000d04:	68e2      	ldr	r2, [r4, #12]
 8000d06:	2a01      	cmp	r2, #1
 8000d08:	d1c9      	bne.n	8000c9e <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	21f8      	movs	r1, #248	; 0xf8
 8000d0e:	fa91 f1a1 	rbit	r1, r1
 8000d12:	6920      	ldr	r0, [r4, #16]
 8000d14:	fab1 f181 	clz	r1, r1
 8000d18:	fa00 f101 	lsl.w	r1, r0, r1
 8000d1c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d20:	430a      	orrs	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d24:	e02e      	b.n	8000d84 <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d26:	68e2      	ldr	r2, [r4, #12]
 8000d28:	4b7c      	ldr	r3, [pc, #496]	; (8000f1c <HAL_RCC_OscConfig+0x2bc>)
 8000d2a:	b1ea      	cbz	r2, 8000d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d30:	f7ff fabc 	bl	80002ac <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	4d77      	ldr	r5, [pc, #476]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d36:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d38:	682b      	ldr	r3, [r5, #0]
 8000d3a:	4876      	ldr	r0, [pc, #472]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
 8000d3c:	079b      	lsls	r3, r3, #30
 8000d3e:	d405      	bmi.n	8000d4c <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d40:	f7ff fab4 	bl	80002ac <HAL_GetTick>
 8000d44:	1b80      	subs	r0, r0, r6
 8000d46:	2802      	cmp	r0, #2
 8000d48:	d9f6      	bls.n	8000d38 <HAL_RCC_OscConfig+0xd8>
 8000d4a:	e7bb      	b.n	8000cc4 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4c:	6803      	ldr	r3, [r0, #0]
 8000d4e:	22f8      	movs	r2, #248	; 0xf8
 8000d50:	fa92 f2a2 	rbit	r2, r2
 8000d54:	6921      	ldr	r1, [r4, #16]
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d62:	4313      	orrs	r3, r2
 8000d64:	6003      	str	r3, [r0, #0]
 8000d66:	e00d      	b.n	8000d84 <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d6a:	f7ff fa9f 	bl	80002ac <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	4d69      	ldr	r5, [pc, #420]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d70:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	682b      	ldr	r3, [r5, #0]
 8000d74:	079f      	lsls	r7, r3, #30
 8000d76:	d505      	bpl.n	8000d84 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d78:	f7ff fa98 	bl	80002ac <HAL_GetTick>
 8000d7c:	1b80      	subs	r0, r0, r6
 8000d7e:	2802      	cmp	r0, #2
 8000d80:	d9f7      	bls.n	8000d72 <HAL_RCC_OscConfig+0x112>
 8000d82:	e79f      	b.n	8000cc4 <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	071e      	lsls	r6, r3, #28
 8000d88:	d403      	bmi.n	8000d92 <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	075d      	lsls	r5, r3, #29
 8000d8e:	d545      	bpl.n	8000e1c <HAL_RCC_OscConfig+0x1bc>
 8000d90:	e01f      	b.n	8000dd2 <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d92:	6962      	ldr	r2, [r4, #20]
 8000d94:	4b62      	ldr	r3, [pc, #392]	; (8000f20 <HAL_RCC_OscConfig+0x2c0>)
 8000d96:	b172      	cbz	r2, 8000db6 <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d9c:	f7ff fa86 	bl	80002ac <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da0:	4d5c      	ldr	r5, [pc, #368]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000da2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000da6:	0798      	lsls	r0, r3, #30
 8000da8:	d4ef      	bmi.n	8000d8a <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000daa:	f7ff fa7f 	bl	80002ac <HAL_GetTick>
 8000dae:	1b80      	subs	r0, r0, r6
 8000db0:	2802      	cmp	r0, #2
 8000db2:	d9f7      	bls.n	8000da4 <HAL_RCC_OscConfig+0x144>
 8000db4:	e786      	b.n	8000cc4 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000db6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000db8:	f7ff fa78 	bl	80002ac <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dbc:	4d55      	ldr	r5, [pc, #340]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dbe:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dc2:	0799      	lsls	r1, r3, #30
 8000dc4:	d5e1      	bpl.n	8000d8a <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fa71 	bl	80002ac <HAL_GetTick>
 8000dca:	1b80      	subs	r0, r0, r6
 8000dcc:	2802      	cmp	r0, #2
 8000dce:	d9f7      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x160>
 8000dd0:	e778      	b.n	8000cc4 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	4b4f      	ldr	r3, [pc, #316]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000dd8:	4d52      	ldr	r5, [pc, #328]	; (8000f24 <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ddc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000df4:	f7ff fa5a 	bl	80002ac <HAL_GetTick>
 8000df8:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000dfa:	682b      	ldr	r3, [r5, #0]
 8000dfc:	05da      	lsls	r2, r3, #23
 8000dfe:	d510      	bpl.n	8000e22 <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e00:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <HAL_RCC_OscConfig+0x2c8>)
 8000e02:	7a22      	ldrb	r2, [r4, #8]
 8000e04:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e06:	68a3      	ldr	r3, [r4, #8]
 8000e08:	b1bb      	cbz	r3, 8000e3a <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fa4f 	bl	80002ac <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e0e:	4d41      	ldr	r5, [pc, #260]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e10:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e12:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e16:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e18:	079b      	lsls	r3, r3, #30
 8000e1a:	d508      	bpl.n	8000e2e <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e1c:	69a2      	ldr	r2, [r4, #24]
 8000e1e:	b9da      	cbnz	r2, 8000e58 <HAL_RCC_OscConfig+0x1f8>
 8000e20:	e059      	b.n	8000ed6 <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e22:	f7ff fa43 	bl	80002ac <HAL_GetTick>
 8000e26:	1b80      	subs	r0, r0, r6
 8000e28:	2802      	cmp	r0, #2
 8000e2a:	d9e6      	bls.n	8000dfa <HAL_RCC_OscConfig+0x19a>
 8000e2c:	e74a      	b.n	8000cc4 <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e2e:	f7ff fa3d 	bl	80002ac <HAL_GetTick>
 8000e32:	1b80      	subs	r0, r0, r6
 8000e34:	42b8      	cmp	r0, r7
 8000e36:	d9ee      	bls.n	8000e16 <HAL_RCC_OscConfig+0x1b6>
 8000e38:	e744      	b.n	8000cc4 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fa37 	bl	80002ac <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e3e:	4d35      	ldr	r5, [pc, #212]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e40:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e42:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e46:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e48:	0798      	lsls	r0, r3, #30
 8000e4a:	d5e7      	bpl.n	8000e1c <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fa2e 	bl	80002ac <HAL_GetTick>
 8000e50:	1b80      	subs	r0, r0, r6
 8000e52:	42b8      	cmp	r0, r7
 8000e54:	d9f7      	bls.n	8000e46 <HAL_RCC_OscConfig+0x1e6>
 8000e56:	e735      	b.n	8000cc4 <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e58:	4d2e      	ldr	r5, [pc, #184]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
 8000e5a:	68ab      	ldr	r3, [r5, #8]
 8000e5c:	f003 030c 	and.w	r3, r3, #12
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	f43f af1c 	beq.w	8000c9e <HAL_RCC_OscConfig+0x3e>
 8000e66:	4e31      	ldr	r6, [pc, #196]	; (8000f2c <HAL_RCC_OscConfig+0x2cc>)
 8000e68:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e6a:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e6c:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e6e:	d141      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e70:	f7ff fa1c 	bl	80002ac <HAL_GetTick>
 8000e74:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e76:	682b      	ldr	r3, [r5, #0]
 8000e78:	4f26      	ldr	r7, [pc, #152]	; (8000f14 <HAL_RCC_OscConfig+0x2b4>)
 8000e7a:	0199      	lsls	r1, r3, #6
 8000e7c:	d42d      	bmi.n	8000eda <HAL_RCC_OscConfig+0x27a>
 8000e7e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000e82:	fa92 f2a2 	rbit	r2, r2
 8000e86:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e8a:	fab2 fe82 	clz	lr, r2
 8000e8e:	fa93 f3a3 	rbit	r3, r3
 8000e92:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000e96:	fab3 f583 	clz	r5, r3
 8000e9a:	fa92 f2a2 	rbit	r2, r2
 8000e9e:	69e0      	ldr	r0, [r4, #28]
 8000ea0:	6a23      	ldr	r3, [r4, #32]
 8000ea2:	fab2 f182 	clz	r1, r2
 8000ea6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ea8:	4303      	orrs	r3, r0
 8000eaa:	fa02 f20e 	lsl.w	r2, r2, lr
 8000eae:	ea43 0002 	orr.w	r0, r3, r2
 8000eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000eb4:	085a      	lsrs	r2, r3, #1
 8000eb6:	3a01      	subs	r2, #1
 8000eb8:	fa02 f305 	lsl.w	r3, r2, r5
 8000ebc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ebe:	4303      	orrs	r3, r0
 8000ec0:	408a      	lsls	r2, r1
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eca:	f7ff f9ef 	bl	80002ac <HAL_GetTick>
 8000ece:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	019a      	lsls	r2, r3, #6
 8000ed4:	d508      	bpl.n	8000ee8 <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	e018      	b.n	8000f0c <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eda:	f7ff f9e7 	bl	80002ac <HAL_GetTick>
 8000ede:	ebc8 0000 	rsb	r0, r8, r0
 8000ee2:	2802      	cmp	r0, #2
 8000ee4:	d9c7      	bls.n	8000e76 <HAL_RCC_OscConfig+0x216>
 8000ee6:	e6ed      	b.n	8000cc4 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee8:	f7ff f9e0 	bl	80002ac <HAL_GetTick>
 8000eec:	1b00      	subs	r0, r0, r4
 8000eee:	2802      	cmp	r0, #2
 8000ef0:	d9ee      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x270>
 8000ef2:	e6e7      	b.n	8000cc4 <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff f9da 	bl	80002ac <HAL_GetTick>
 8000ef8:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000efa:	682b      	ldr	r3, [r5, #0]
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	d5ea      	bpl.n	8000ed6 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f00:	f7ff f9d4 	bl	80002ac <HAL_GetTick>
 8000f04:	1b00      	subs	r0, r0, r4
 8000f06:	2802      	cmp	r0, #2
 8000f08:	d9f7      	bls.n	8000efa <HAL_RCC_OscConfig+0x29a>
 8000f0a:	e6db      	b.n	8000cc4 <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000f0c:	b002      	add	sp, #8
 8000f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40023802 	.word	0x40023802
 8000f1c:	42470000 	.word	0x42470000
 8000f20:	42470e80 	.word	0x42470e80
 8000f24:	40007000 	.word	0x40007000
 8000f28:	40023870 	.word	0x40023870
 8000f2c:	42470060 	.word	0x42470060

08000f30 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f30:	491b      	ldr	r1, [pc, #108]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0x70>)
 8000f32:	688b      	ldr	r3, [r1, #8]
 8000f34:	f003 030c 	and.w	r3, r3, #12
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d02c      	beq.n	8000f96 <HAL_RCC_GetSysClockFreq+0x66>
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d12c      	bne.n	8000f9a <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f40:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f42:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f44:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f48:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f4c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000f50:	684b      	ldr	r3, [r1, #4]
 8000f52:	fa92 f2a2 	rbit	r2, r2
 8000f56:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000f5a:	fab2 f282 	clz	r2, r2
 8000f5e:	ea01 0103 	and.w	r1, r1, r3
 8000f62:	fa21 f102 	lsr.w	r1, r1, r2
 8000f66:	bf14      	ite	ne
 8000f68:	4a0e      	ldrne	r2, [pc, #56]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000f6a:	4a0f      	ldreq	r2, [pc, #60]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x78>)
 8000f6c:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000f72:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000f76:	6852      	ldr	r2, [r2, #4]
 8000f78:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000f7c:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000f80:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000f84:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000f88:	fa22 f000 	lsr.w	r0, r2, r0
 8000f8c:	3001      	adds	r0, #1
 8000f8e:	0040      	lsls	r0, r0, #1
 8000f90:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f94:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f96:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x74>)
 8000f98:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f9a:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	00b71b00 	.word	0x00b71b00
 8000fa8:	00f42400 	.word	0x00f42400

08000fac <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fac:	4b55      	ldr	r3, [pc, #340]	; (8001104 <HAL_RCC_ClockConfig+0x158>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	f002 020f 	and.w	r2, r2, #15
 8000fb4:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fba:	4605      	mov	r5, r0
 8000fbc:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fbe:	d30a      	bcc.n	8000fd6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fc0:	6829      	ldr	r1, [r5, #0]
 8000fc2:	0788      	lsls	r0, r1, #30
 8000fc4:	d511      	bpl.n	8000fea <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fc6:	4850      	ldr	r0, [pc, #320]	; (8001108 <HAL_RCC_ClockConfig+0x15c>)
 8000fc8:	6883      	ldr	r3, [r0, #8]
 8000fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fce:	68ab      	ldr	r3, [r5, #8]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	6083      	str	r3, [r0, #8]
 8000fd4:	e009      	b.n	8000fea <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd6:	b2ca      	uxtb	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	4299      	cmp	r1, r3
 8000fe2:	d0ed      	beq.n	8000fc0 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fea:	07c9      	lsls	r1, r1, #31
 8000fec:	d406      	bmi.n	8000ffc <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fee:	4b45      	ldr	r3, [pc, #276]	; (8001104 <HAL_RCC_ClockConfig+0x158>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	f002 020f 	and.w	r2, r2, #15
 8000ff6:	4296      	cmp	r6, r2
 8000ff8:	d351      	bcc.n	800109e <HAL_RCC_ClockConfig+0xf2>
 8000ffa:	e057      	b.n	80010ac <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ffc:	686b      	ldr	r3, [r5, #4]
 8000ffe:	4a42      	ldr	r2, [pc, #264]	; (8001108 <HAL_RCC_ClockConfig+0x15c>)
 8001000:	2b01      	cmp	r3, #1
 8001002:	d103      	bne.n	800100c <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001004:	6812      	ldr	r2, [r2, #0]
 8001006:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800100a:	e008      	b.n	800101e <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800100c:	1e99      	subs	r1, r3, #2
 800100e:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001010:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001012:	d802      	bhi.n	800101a <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001014:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001018:	e001      	b.n	800101e <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101a:	f012 0f02 	tst.w	r2, #2
 800101e:	d0e1      	beq.n	8000fe4 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001020:	4c39      	ldr	r4, [pc, #228]	; (8001108 <HAL_RCC_ClockConfig+0x15c>)
 8001022:	68a2      	ldr	r2, [r4, #8]
 8001024:	f022 0203 	bic.w	r2, r2, #3
 8001028:	4313      	orrs	r3, r2
 800102a:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800102c:	f7ff f93e 	bl	80002ac <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001030:	686b      	ldr	r3, [r5, #4]
 8001032:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001034:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001036:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800103a:	d10c      	bne.n	8001056 <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800103c:	68a3      	ldr	r3, [r4, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b04      	cmp	r3, #4
 8001044:	d0d3      	beq.n	8000fee <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001046:	f7ff f931 	bl	80002ac <HAL_GetTick>
 800104a:	1bc0      	subs	r0, r0, r7
 800104c:	4540      	cmp	r0, r8
 800104e:	d9f5      	bls.n	800103c <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8001050:	2003      	movs	r0, #3
 8001052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001056:	2b02      	cmp	r3, #2
 8001058:	d10a      	bne.n	8001070 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800105a:	68a3      	ldr	r3, [r4, #8]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b08      	cmp	r3, #8
 8001062:	d0c4      	beq.n	8000fee <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001064:	f7ff f922 	bl	80002ac <HAL_GetTick>
 8001068:	1bc0      	subs	r0, r0, r7
 800106a:	4540      	cmp	r0, r8
 800106c:	d9f5      	bls.n	800105a <HAL_RCC_ClockConfig+0xae>
 800106e:	e7ef      	b.n	8001050 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001070:	2b03      	cmp	r3, #3
 8001072:	d10f      	bne.n	8001094 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001074:	68a3      	ldr	r3, [r4, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b0c      	cmp	r3, #12
 800107c:	d0b7      	beq.n	8000fee <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800107e:	f7ff f915 	bl	80002ac <HAL_GetTick>
 8001082:	1bc0      	subs	r0, r0, r7
 8001084:	4540      	cmp	r0, r8
 8001086:	d9f5      	bls.n	8001074 <HAL_RCC_ClockConfig+0xc8>
 8001088:	e7e2      	b.n	8001050 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800108a:	f7ff f90f 	bl	80002ac <HAL_GetTick>
 800108e:	1bc0      	subs	r0, r0, r7
 8001090:	4540      	cmp	r0, r8
 8001092:	d8dd      	bhi.n	8001050 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001094:	68a3      	ldr	r3, [r4, #8]
 8001096:	f013 0f0c 	tst.w	r3, #12
 800109a:	d1f6      	bne.n	800108a <HAL_RCC_ClockConfig+0xde>
 800109c:	e7a7      	b.n	8000fee <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800109e:	b2f2      	uxtb	r2, r6
 80010a0:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	429e      	cmp	r6, r3
 80010aa:	d19b      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ac:	6829      	ldr	r1, [r5, #0]
 80010ae:	074a      	lsls	r2, r1, #29
 80010b0:	d506      	bpl.n	80010c0 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010b2:	4815      	ldr	r0, [pc, #84]	; (8001108 <HAL_RCC_ClockConfig+0x15c>)
 80010b4:	6883      	ldr	r3, [r0, #8]
 80010b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010ba:	68eb      	ldr	r3, [r5, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c0:	070b      	lsls	r3, r1, #28
 80010c2:	d507      	bpl.n	80010d4 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010c4:	4a10      	ldr	r2, [pc, #64]	; (8001108 <HAL_RCC_ClockConfig+0x15c>)
 80010c6:	6929      	ldr	r1, [r5, #16]
 80010c8:	6893      	ldr	r3, [r2, #8]
 80010ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010d2:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80010d4:	f7ff ff2c 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_RCC_ClockConfig+0x15c>)
 80010da:	22f0      	movs	r2, #240	; 0xf0
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	fa92 f2a2 	rbit	r2, r2
 80010e2:	fab2 f282 	clz	r2, r2
 80010e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010ea:	40d3      	lsrs	r3, r2
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_RCC_ClockConfig+0x160>)
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	40d8      	lsrs	r0, r3
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <HAL_RCC_ClockConfig+0x164>)
 80010f4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f001 ff58 	bl	8002fac <HAL_InitTick>
  
  return HAL_OK;
 80010fc:	2000      	movs	r0, #0
}
 80010fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00
 8001108:	40023800 	.word	0x40023800
 800110c:	0800311c 	.word	0x0800311c
 8001110:	20000000 	.word	0x20000000

08001114 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001114:	4b01      	ldr	r3, [pc, #4]	; (800111c <HAL_RCC_GetHCLKFreq+0x8>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000

08001120 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001122:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	fa92 f2a2 	rbit	r2, r2
 800112c:	fab2 f282 	clz	r2, r2
 8001130:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001134:	40d3      	lsrs	r3, r2
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001138:	5cd3      	ldrb	r3, [r2, r3]
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800113c:	6810      	ldr	r0, [r2, #0]
}
 800113e:	40d8      	lsrs	r0, r3
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	0800311c 	.word	0x0800311c
 800114c:	20000000 	.word	0x20000000

08001150 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001152:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	fa92 f2a2 	rbit	r2, r2
 800115c:	fab2 f282 	clz	r2, r2
 8001160:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001164:	40d3      	lsrs	r3, r2
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001168:	5cd3      	ldrb	r3, [r2, r3]
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800116c:	6810      	ldr	r0, [r2, #0]
} 
 800116e:	40d8      	lsrs	r0, r3
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	0800311c 	.word	0x0800311c
 800117c:	20000000 	.word	0x20000000

08001180 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001180:	230f      	movs	r3, #15
 8001182:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_RCC_GetClockConfig+0x34>)
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	f002 0203 	and.w	r2, r2, #3
 800118c:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001194:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800119c:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80011a6:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_RCC_GetClockConfig+0x38>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	600b      	str	r3, [r1, #0]
 80011b2:	4770      	bx	lr
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40023c00 	.word	0x40023c00

080011bc <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011bc:	6803      	ldr	r3, [r0, #0]
 80011be:	07da      	lsls	r2, r3, #31
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80011c4:	4605      	mov	r5, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011c6:	d419      	bmi.n	80011fc <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
    }
  }
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011c8:	6828      	ldr	r0, [r5, #0]
 80011ca:	f010 0002 	ands.w	r0, r0, #2
 80011ce:	f000 8090 	beq.w	80012f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80011d8:	4c48      	ldr	r4, [pc, #288]	; (80012fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f2:	6023      	str	r3, [r4, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80011f4:	f7ff f85a 	bl	80002ac <HAL_GetTick>
 80011f8:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80011fa:	e039      	b.n	8001270 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)    
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80011fc:	4e40      	ldr	r6, [pc, #256]	; (8001300 <HAL_RCCEx_PeriphCLKConfig+0x144>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80011fe:	4f3e      	ldr	r7, [pc, #248]	; (80012f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)    
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001204:	f7ff f852 	bl	80002ac <HAL_GetTick>
 8001208:	4680      	mov	r8, r0
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	4c3a      	ldr	r4, [pc, #232]	; (80012f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	d507      	bpl.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001212:	f7ff f84b 	bl	80002ac <HAL_GetTick>
 8001216:	ebc8 0000 	rsb	r0, r8, r0
 800121a:	2802      	cmp	r0, #2
 800121c:	d9f5      	bls.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800121e:	2003      	movs	r0, #3
 8001220:	e067      	b.n	80012f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001222:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001226:	fa91 f1a1 	rbit	r1, r1
 800122a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800122e:	fab1 f181 	clz	r1, r1
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	fab3 f283 	clz	r2, r3
 800123a:	686b      	ldr	r3, [r5, #4]
 800123c:	fa03 f101 	lsl.w	r1, r3, r1
 8001240:	68ab      	ldr	r3, [r5, #8]
 8001242:	4093      	lsls	r3, r2
 8001244:	430b      	orrs	r3, r1
 8001246:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
#endif /* STM32F411xE */
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800124a:	2301      	movs	r3, #1
 800124c:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800124e:	f7ff f82d 	bl	80002ac <HAL_GetTick>
 8001252:	4606      	mov	r6, r0
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	0118      	lsls	r0, r3, #4
 8001258:	d4b6      	bmi.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0xc>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800125a:	f7ff f827 	bl	80002ac <HAL_GetTick>
 800125e:	1b80      	subs	r0, r0, r6
 8001260:	2802      	cmp	r0, #2
 8001262:	d9f7      	bls.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8001264:	e7db      	b.n	800121e <HAL_RCCEx_PeriphCLKConfig+0x62>
    /* Get tick */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001266:	f7ff f821 	bl	80002ac <HAL_GetTick>
 800126a:	1b80      	subs	r0, r0, r6
 800126c:	2802      	cmp	r0, #2
 800126e:	d8d6      	bhi.n	800121e <HAL_RCCEx_PeriphCLKConfig+0x62>
    PWR->CR |= PWR_CR_DBP;
    
    /* Get tick */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	05d9      	lsls	r1, r3, #23
 8001274:	d5f7      	bpl.n	8001266 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001276:	4c20      	ldr	r4, [pc, #128]	; (80012f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001278:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800127a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800127e:	d10f      	bne.n	80012a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001280:	68ea      	ldr	r2, [r5, #12]
 8001282:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8001286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800128c:	d127      	bne.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x122>
 800128e:	6899      	ldr	r1, [r3, #8]
 8001290:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 8001294:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8001298:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800129c:	4301      	orrs	r1, r0
 800129e:	e021      	b.n	80012e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012a0:	68ea      	ldr	r2, [r5, #12]
 80012a2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d0ea      	beq.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80012ac:	4a15      	ldr	r2, [pc, #84]	; (8001304 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80012ae:	2101      	movs	r1, #1
 80012b0:	6011      	str	r1, [r2, #0]
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012b6:	2100      	movs	r1, #0
 80012b8:	6011      	str	r1, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80012ba:	6723      	str	r3, [r4, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80012bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80012be:	07da      	lsls	r2, r3, #31
 80012c0:	d5de      	bpl.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80012c2:	f7fe fff3 	bl	80002ac <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c6:	f241 3788 	movw	r7, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80012ca:	4606      	mov	r6, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80012ce:	079b      	lsls	r3, r3, #30
 80012d0:	d4d6      	bmi.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7fe ffeb 	bl	80002ac <HAL_GetTick>
 80012d6:	1b80      	subs	r0, r0, r6
 80012d8:	42b8      	cmp	r0, r7
 80012da:	d9f7      	bls.n	80012cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80012dc:	e79f      	b.n	800121e <HAL_RCCEx_PeriphCLKConfig+0x62>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012de:	6899      	ldr	r1, [r3, #8]
 80012e0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80012e4:	6099      	str	r1, [r3, #8]
 80012e6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80012e8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80012ec:	430a      	orrs	r2, r1
 80012ee:	671a      	str	r2, [r3, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80012f0:	2000      	movs	r0, #0
}
 80012f2:	b002      	add	sp, #8
 80012f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000
 8001300:	42470068 	.word	0x42470068
 8001304:	42470e40 	.word	0x42470e40

08001308 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001308:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800130a:	6803      	ldr	r3, [r0, #0]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	0652      	lsls	r2, r2, #25
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001310:	4604      	mov	r4, r0
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001312:	d501      	bpl.n	8001318 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001314:	2000      	movs	r0, #0
 8001316:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800131e:	f7fe ffc5 	bl	80002ac <HAL_GetTick>
 8001322:	4605      	mov	r5, r0

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	065b      	lsls	r3, r3, #25
 800132a:	d4f3      	bmi.n	8001314 <RTC_EnterInitMode+0xc>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800132c:	f7fe ffbe 	bl	80002ac <HAL_GetTick>
 8001330:	1b40      	subs	r0, r0, r5
 8001332:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001336:	d9f5      	bls.n	8001324 <RTC_EnterInitMode+0x1c>
      {       
        return HAL_TIMEOUT;
 8001338:	2003      	movs	r0, #3
      } 
    }
  }
  
  return HAL_OK;  
}
 800133a:	bd38      	pop	{r3, r4, r5, pc}

0800133c <HAL_RTC_Init>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800133c:	b510      	push	{r4, lr}
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800133e:	4604      	mov	r4, r0
 8001340:	2800      	cmp	r0, #0
 8001342:	d03d      	beq.n	80013c0 <HAL_RTC_Init+0x84>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001344:	7f43      	ldrb	r3, [r0, #29]
 8001346:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800134a:	b913      	cbnz	r3, 8001352 <HAL_RTC_Init+0x16>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800134c:	7702      	strb	r2, [r0, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800134e:	f001 fd81 	bl	8002e54 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001352:	2302      	movs	r3, #2
 8001354:	7763      	strb	r3, [r4, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	22ca      	movs	r2, #202	; 0xca
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
 800135c:	2253      	movs	r2, #83	; 0x53
 800135e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001360:	4620      	mov	r0, r4
 8001362:	f7ff ffd1 	bl	8001308 <RTC_EnterInitMode>
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	b120      	cbz	r0, 8001374 <HAL_RTC_Init+0x38>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800136e:	2304      	movs	r3, #4
 8001370:	7763      	strb	r3, [r4, #29]
 8001372:	e025      	b.n	80013c0 <HAL_RTC_Init+0x84>
    return HAL_ERROR;
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800137a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800137e:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001380:	6899      	ldr	r1, [r3, #8]
 8001382:	6862      	ldr	r2, [r4, #4]
 8001384:	4311      	orrs	r1, r2
 8001386:	6922      	ldr	r2, [r4, #16]
 8001388:	4311      	orrs	r1, r2
 800138a:	6962      	ldr	r2, [r4, #20]
 800138c:	430a      	orrs	r2, r1
 800138e:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001390:	68e2      	ldr	r2, [r4, #12]
 8001392:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	68a1      	ldr	r1, [r4, #8]
 8001398:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800139c:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a4:	60da      	str	r2, [r3, #12]
    
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80013a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80013ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80013b0:	69a2      	ldr	r2, [r4, #24]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80013b6:	22ff      	movs	r2, #255	; 0xff
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80013ba:	2301      	movs	r3, #1
 80013bc:	7763      	strb	r3, [r4, #29]
    
    return HAL_OK;
 80013be:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
  {
     return HAL_ERROR;
 80013c0:	2001      	movs	r0, #1
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
    
    return HAL_OK;
  }
}
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80013c4:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80013c6:	4604      	mov	r4, r0
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d036      	beq.n	800143a <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80013d0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80013d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013d8:	b91b      	cbnz	r3, 80013e2 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80013da:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80013de:	f001 fd45 	bl	8002e6c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013e2:	68a1      	ldr	r1, [r4, #8]
 80013e4:	6860      	ldr	r0, [r4, #4]
 80013e6:	4308      	orrs	r0, r1
 80013e8:	68e1      	ldr	r1, [r4, #12]
 80013ea:	4308      	orrs	r0, r1
 80013ec:	6921      	ldr	r1, [r4, #16]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80013ee:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013f0:	4308      	orrs	r0, r1
 80013f2:	6961      	ldr	r1, [r4, #20]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80013f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80013f8:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013fa:	4308      	orrs	r0, r1
 80013fc:	69e1      	ldr	r1, [r4, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80013fe:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001400:	4308      	orrs	r0, r1
 8001402:	6a21      	ldr	r1, [r4, #32]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001408:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800140a:	4308      	orrs	r0, r1
 800140c:	69a2      	ldr	r2, [r4, #24]
 800140e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001410:	4308      	orrs	r0, r1
 8001412:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8001416:	4301      	orrs	r1, r0
 8001418:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800141a:	0c12      	lsrs	r2, r2, #16
 800141c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800141e:	f002 0204 	and.w	r2, r2, #4
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001426:	69da      	ldr	r2, [r3, #28]
 8001428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800142c:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800142e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001430:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001432:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001434:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001438:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 800143a:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 800143c:	bd10      	pop	{r4, pc}

0800143e <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800143e:	4770      	bx	lr

08001440 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8001440:	6803      	ldr	r3, [r0, #0]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001442:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8001444:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001446:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001448:	f002 0541 	and.w	r5, r2, #65	; 0x41
 800144c:	2d01      	cmp	r5, #1
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800144e:	b085      	sub	sp, #20
 8001450:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001452:	d103      	bne.n	800145c <HAL_SPI_IRQHandler+0x1c>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001454:	064d      	lsls	r5, r1, #25
 8001456:	d501      	bpl.n	800145c <HAL_SPI_IRQHandler+0x1c>
  {
    hspi->RxISR(hspi);
 8001458:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800145a:	e005      	b.n	8001468 <HAL_SPI_IRQHandler+0x28>
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 800145c:	0795      	lsls	r5, r2, #30
 800145e:	d505      	bpl.n	800146c <HAL_SPI_IRQHandler+0x2c>
 8001460:	0608      	lsls	r0, r1, #24
 8001462:	d503      	bpl.n	800146c <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->TxISR(hspi);
 8001464:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001466:	4620      	mov	r0, r4
 8001468:	4798      	blx	r3
    return;
 800146a:	e057      	b.n	800151c <HAL_SPI_IRQHandler+0xdc>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800146c:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8001470:	d054      	beq.n	800151c <HAL_SPI_IRQHandler+0xdc>
 8001472:	068d      	lsls	r5, r1, #26
 8001474:	d552      	bpl.n	800151c <HAL_SPI_IRQHandler+0xdc>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 8001476:	0650      	lsls	r0, r2, #25
 8001478:	d517      	bpl.n	80014aa <HAL_SPI_IRQHandler+0x6a>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800147a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800147e:	2803      	cmp	r0, #3
 8001480:	f04f 0500 	mov.w	r5, #0
 8001484:	d00a      	beq.n	800149c <HAL_SPI_IRQHandler+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001488:	f040 0004 	orr.w	r0, r0, #4
 800148c:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800148e:	9500      	str	r5, [sp, #0]
 8001490:	68d8      	ldr	r0, [r3, #12]
 8001492:	9000      	str	r0, [sp, #0]
 8001494:	6898      	ldr	r0, [r3, #8]
 8001496:	9000      	str	r0, [sp, #0]
 8001498:	9800      	ldr	r0, [sp, #0]
 800149a:	e006      	b.n	80014aa <HAL_SPI_IRQHandler+0x6a>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800149c:	9501      	str	r5, [sp, #4]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	9201      	str	r2, [sp, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	9b01      	ldr	r3, [sp, #4]
        return;
 80014a8:	e038      	b.n	800151c <HAL_SPI_IRQHandler+0xdc>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 80014aa:	0695      	lsls	r5, r2, #26
 80014ac:	d50c      	bpl.n	80014c8 <HAL_SPI_IRQHandler+0x88>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80014ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014b0:	f040 0001 	orr.w	r0, r0, #1
 80014b4:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80014b6:	2000      	movs	r0, #0
 80014b8:	9002      	str	r0, [sp, #8]
 80014ba:	6898      	ldr	r0, [r3, #8]
 80014bc:	9002      	str	r0, [sp, #8]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80014c4:	6018      	str	r0, [r3, #0]
 80014c6:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 80014c8:	05d0      	lsls	r0, r2, #23
 80014ca:	d508      	bpl.n	80014de <HAL_SPI_IRQHandler+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80014cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80014ce:	f042 0208 	orr.w	r2, r2, #8
 80014d2:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80014d4:	2200      	movs	r2, #0
 80014d6:	9203      	str	r2, [sp, #12]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	9203      	str	r2, [sp, #12]
 80014dc:	9a03      	ldr	r2, [sp, #12]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80014de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80014e0:	b1e2      	cbz	r2, 800151c <HAL_SPI_IRQHandler+0xdc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80014e8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80014ea:	2201      	movs	r2, #1
 80014ec:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80014f0:	078a      	lsls	r2, r1, #30
 80014f2:	d010      	beq.n	8001516 <HAL_SPI_IRQHandler+0xd6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80014f4:	685a      	ldr	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 80014f6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c

      hspi->State = HAL_SPI_STATE_READY;
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80014f8:	f022 0203 	bic.w	r2, r2, #3
 80014fc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 80014fe:	b118      	cbz	r0, 8001508 <HAL_SPI_IRQHandler+0xc8>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <HAL_SPI_IRQHandler+0xe0>)
 8001502:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001504:	f7ff faa8 	bl	8000a58 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 8001508:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800150a:	b138      	cbz	r0, 800151c <HAL_SPI_IRQHandler+0xdc>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <HAL_SPI_IRQHandler+0xe0>)
 800150e:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001510:	f7ff faa2 	bl	8000a58 <HAL_DMA_Abort_IT>
 8001514:	e002      	b.n	800151c <HAL_SPI_IRQHandler+0xdc>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff ff91 	bl	800143e <HAL_SPI_ErrorCallback>
      }
    }
    return;
  }
}
 800151c:	b005      	add	sp, #20
 800151e:	bd30      	pop	{r4, r5, pc}
 8001520:	08001525 	.word	0x08001525

08001524 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001524:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001526:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0;
 800152c:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 800152e:	f7ff ff86 	bl	800143e <HAL_SPI_ErrorCallback>
 8001532:	bd08      	pop	{r3, pc}

08001534 <HAL_TIM_Base_MspInit>:
 8001534:	4770      	bx	lr

08001536 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001536:	6803      	ldr	r3, [r0, #0]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	f042 0201 	orr.w	r2, r2, #1
 800153e:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001548:	2000      	movs	r0, #0
 800154a:	4770      	bx	lr

0800154c <HAL_TIM_OC_DelayElapsedCallback>:
 800154c:	4770      	bx	lr

0800154e <HAL_TIM_IC_CaptureCallback>:
 800154e:	4770      	bx	lr

08001550 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001550:	4770      	bx	lr

08001552 <HAL_TIM_TriggerCallback>:
 8001552:	4770      	bx	lr

08001554 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001554:	6803      	ldr	r3, [r0, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800155a:	b510      	push	{r4, lr}
 800155c:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800155e:	d514      	bpl.n	800158a <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	0792      	lsls	r2, r2, #30
 8001564:	d511      	bpl.n	800158a <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001566:	f06f 0202 	mvn.w	r2, #2
 800156a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800156c:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800156e:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001570:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001572:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001574:	d002      	beq.n	800157c <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001576:	f7ff ffea 	bl	800154e <HAL_TIM_IC_CaptureCallback>
 800157a:	e004      	b.n	8001586 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800157c:	f7ff ffe6 	bl	800154c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001580:	4620      	mov	r0, r4
 8001582:	f7ff ffe5 	bl	8001550 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001586:	2300      	movs	r3, #0
 8001588:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	0750      	lsls	r0, r2, #29
 8001590:	d516      	bpl.n	80015c0 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	0751      	lsls	r1, r2, #29
 8001596:	d513      	bpl.n	80015c0 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001598:	f06f 0204 	mvn.w	r2, #4
 800159c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800159e:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015a0:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015a2:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015a6:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015a8:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015aa:	d002      	beq.n	80015b2 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015ac:	f7ff ffcf 	bl	800154e <HAL_TIM_IC_CaptureCallback>
 80015b0:	e004      	b.n	80015bc <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b2:	f7ff ffcb 	bl	800154c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff ffca 	bl	8001550 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015bc:	2300      	movs	r3, #0
 80015be:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	0712      	lsls	r2, r2, #28
 80015c6:	d515      	bpl.n	80015f4 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	0710      	lsls	r0, r2, #28
 80015cc:	d512      	bpl.n	80015f4 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015ce:	f06f 0208 	mvn.w	r2, #8
 80015d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015d4:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015d6:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015d8:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015da:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015dc:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015de:	d002      	beq.n	80015e6 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015e0:	f7ff ffb5 	bl	800154e <HAL_TIM_IC_CaptureCallback>
 80015e4:	e004      	b.n	80015f0 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e6:	f7ff ffb1 	bl	800154c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff ffb0 	bl	8001550 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f0:	2300      	movs	r3, #0
 80015f2:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	06d2      	lsls	r2, r2, #27
 80015fa:	d516      	bpl.n	800162a <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	06d0      	lsls	r0, r2, #27
 8001600:	d513      	bpl.n	800162a <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001602:	f06f 0210 	mvn.w	r2, #16
 8001606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001608:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800160a:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800160c:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001610:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001612:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001614:	d002      	beq.n	800161c <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001616:	f7ff ff9a 	bl	800154e <HAL_TIM_IC_CaptureCallback>
 800161a:	e004      	b.n	8001626 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800161c:	f7ff ff96 	bl	800154c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff ff95 	bl	8001550 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001626:	2300      	movs	r3, #0
 8001628:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	07d1      	lsls	r1, r2, #31
 8001630:	d508      	bpl.n	8001644 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	07d2      	lsls	r2, r2, #31
 8001636:	d505      	bpl.n	8001644 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001638:	f06f 0201 	mvn.w	r2, #1
 800163c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800163e:	4620      	mov	r0, r4
 8001640:	f001 fb38 	bl	8002cb4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	0610      	lsls	r0, r2, #24
 800164a:	d508      	bpl.n	800165e <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	0611      	lsls	r1, r2, #24
 8001650:	d505      	bpl.n	800165e <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001652:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001656:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001658:	4620      	mov	r0, r4
 800165a:	f000 f89c 	bl	8001796 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	0652      	lsls	r2, r2, #25
 8001664:	d508      	bpl.n	8001678 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	0650      	lsls	r0, r2, #25
 800166a:	d505      	bpl.n	8001678 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800166c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001670:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff ff6d 	bl	8001552 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	0691      	lsls	r1, r2, #26
 800167e:	d50a      	bpl.n	8001696 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	0692      	lsls	r2, r2, #26
 8001684:	d507      	bpl.n	8001696 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001686:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800168a:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800168c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 800168e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8001692:	f000 b87f 	b.w	8001794 <HAL_TIMEx_CommutationCallback>
 8001696:	bd10      	pop	{r4, pc}

08001698 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001698:	4a2e      	ldr	r2, [pc, #184]	; (8001754 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800169a:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800169c:	4290      	cmp	r0, r2
 800169e:	d012      	beq.n	80016c6 <TIM_Base_SetConfig+0x2e>
 80016a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016a4:	d00f      	beq.n	80016c6 <TIM_Base_SetConfig+0x2e>
 80016a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80016aa:	4290      	cmp	r0, r2
 80016ac:	d00b      	beq.n	80016c6 <TIM_Base_SetConfig+0x2e>
 80016ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016b2:	4290      	cmp	r0, r2
 80016b4:	d007      	beq.n	80016c6 <TIM_Base_SetConfig+0x2e>
 80016b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ba:	4290      	cmp	r0, r2
 80016bc:	d003      	beq.n	80016c6 <TIM_Base_SetConfig+0x2e>
 80016be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80016c2:	4290      	cmp	r0, r2
 80016c4:	d118      	bne.n	80016f8 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80016c6:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016cc:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80016ce:	4a21      	ldr	r2, [pc, #132]	; (8001754 <TIM_Base_SetConfig+0xbc>)
 80016d0:	4290      	cmp	r0, r2
 80016d2:	d037      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
 80016d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016d8:	d034      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <TIM_Base_SetConfig+0xc0>)
 80016dc:	4290      	cmp	r0, r2
 80016de:	d031      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
 80016e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016e4:	4290      	cmp	r0, r2
 80016e6:	d02d      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
 80016e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ec:	4290      	cmp	r0, r2
 80016ee:	d029      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
 80016f0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80016f4:	4290      	cmp	r0, r2
 80016f6:	d025      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
 80016f8:	4a18      	ldr	r2, [pc, #96]	; (800175c <TIM_Base_SetConfig+0xc4>)
 80016fa:	4290      	cmp	r0, r2
 80016fc:	d022      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
 80016fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001702:	4290      	cmp	r0, r2
 8001704:	d01e      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
 8001706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800170a:	4290      	cmp	r0, r2
 800170c:	d01a      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
 800170e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001712:	4290      	cmp	r0, r2
 8001714:	d016      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
 8001716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800171a:	4290      	cmp	r0, r2
 800171c:	d012      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
 800171e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001722:	4290      	cmp	r0, r2
 8001724:	d00e      	beq.n	8001744 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001726:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001728:	688b      	ldr	r3, [r1, #8]
 800172a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800172c:	680b      	ldr	r3, [r1, #0]
 800172e:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <TIM_Base_SetConfig+0xbc>)
 8001732:	4298      	cmp	r0, r3
 8001734:	d00b      	beq.n	800174e <TIM_Base_SetConfig+0xb6>
 8001736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800173a:	4298      	cmp	r0, r3
 800173c:	d007      	beq.n	800174e <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800173e:	2301      	movs	r3, #1
 8001740:	6143      	str	r3, [r0, #20]
}
 8001742:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001744:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800174a:	4313      	orrs	r3, r2
 800174c:	e7eb      	b.n	8001726 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800174e:	690b      	ldr	r3, [r1, #16]
 8001750:	6303      	str	r3, [r0, #48]	; 0x30
 8001752:	e7f4      	b.n	800173e <TIM_Base_SetConfig+0xa6>
 8001754:	40010000 	.word	0x40010000
 8001758:	40000400 	.word	0x40000400
 800175c:	40014000 	.word	0x40014000

08001760 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001760:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001762:	4604      	mov	r4, r0
 8001764:	b1a0      	cbz	r0, 8001790 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001766:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800176a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800176e:	b91b      	cbnz	r3, 8001778 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001770:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001774:	f7ff fede 	bl	8001534 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001778:	2302      	movs	r3, #2
 800177a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800177e:	6820      	ldr	r0, [r4, #0]
 8001780:	1d21      	adds	r1, r4, #4
 8001782:	f7ff ff89 	bl	8001698 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001786:	2301      	movs	r3, #1
 8001788:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800178c:	2000      	movs	r0, #0
 800178e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001790:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001792:	bd10      	pop	{r4, pc}

08001794 <HAL_TIMEx_CommutationCallback>:
 8001794:	4770      	bx	lr

08001796 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001796:	4770      	bx	lr

08001798 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001798:	6803      	ldr	r3, [r0, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80017a0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	f022 0201 	bic.w	r2, r2, #1
 80017a8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80017aa:	2320      	movs	r3, #32
 80017ac:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80017b0:	4770      	bx	lr
	...

080017b4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80017b8:	6807      	ldr	r7, [r0, #0]
 80017ba:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017bc:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80017be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80017c2:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017c4:	68a1      	ldr	r1, [r4, #8]
 80017c6:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80017c8:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017ca:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80017cc:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80017ce:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017d0:	4311      	orrs	r1, r2
 80017d2:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80017d4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017d8:	430a      	orrs	r2, r1
 80017da:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80017dc:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017e0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80017e2:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80017e4:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80017e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80017ea:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80017f0:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	4b7c      	ldr	r3, [pc, #496]	; (80019e8 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017f8:	d17c      	bne.n	80018f4 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80017fa:	429f      	cmp	r7, r3
 80017fc:	d003      	beq.n	8001806 <UART_SetConfig+0x52>
 80017fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001802:	429f      	cmp	r7, r3
 8001804:	d131      	bne.n	800186a <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001806:	f7ff fca3 	bl	8001150 <HAL_RCC_GetPCLK2Freq>
 800180a:	6863      	ldr	r3, [r4, #4]
 800180c:	2519      	movs	r5, #25
 800180e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001812:	4368      	muls	r0, r5
 8001814:	fbb0 f8f8 	udiv	r8, r0, r8
 8001818:	f7ff fc9a 	bl	8001150 <HAL_RCC_GetPCLK2Freq>
 800181c:	6866      	ldr	r6, [r4, #4]
 800181e:	4368      	muls	r0, r5
 8001820:	0076      	lsls	r6, r6, #1
 8001822:	fbb0 f6f6 	udiv	r6, r0, r6
 8001826:	f7ff fc93 	bl	8001150 <HAL_RCC_GetPCLK2Freq>
 800182a:	6863      	ldr	r3, [r4, #4]
 800182c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4368      	muls	r0, r5
 8001834:	fbb0 f0f3 	udiv	r0, r0, r3
 8001838:	fbb0 f0f9 	udiv	r0, r0, r9
 800183c:	fb09 6610 	mls	r6, r9, r0, r6
 8001840:	f7ff fc86 	bl	8001150 <HAL_RCC_GetPCLK2Freq>
 8001844:	fbb8 f8f9 	udiv	r8, r8, r9
 8001848:	6861      	ldr	r1, [r4, #4]
 800184a:	00f6      	lsls	r6, r6, #3
 800184c:	3632      	adds	r6, #50	; 0x32
 800184e:	fbb6 f6f9 	udiv	r6, r6, r9
 8001852:	0076      	lsls	r6, r6, #1
 8001854:	4368      	muls	r0, r5
 8001856:	0049      	lsls	r1, r1, #1
 8001858:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800185c:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001860:	fbb0 faf1 	udiv	sl, r0, r1
 8001864:	f7ff fc74 	bl	8001150 <HAL_RCC_GetPCLK2Freq>
 8001868:	e030      	b.n	80018cc <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800186a:	f7ff fc59 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 800186e:	6863      	ldr	r3, [r4, #4]
 8001870:	2519      	movs	r5, #25
 8001872:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001876:	4368      	muls	r0, r5
 8001878:	fbb0 f8f8 	udiv	r8, r0, r8
 800187c:	f7ff fc50 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8001880:	6866      	ldr	r6, [r4, #4]
 8001882:	4368      	muls	r0, r5
 8001884:	0076      	lsls	r6, r6, #1
 8001886:	fbb0 f6f6 	udiv	r6, r0, r6
 800188a:	f7ff fc49 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 800188e:	6863      	ldr	r3, [r4, #4]
 8001890:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4368      	muls	r0, r5
 8001898:	fbb0 f0f3 	udiv	r0, r0, r3
 800189c:	fbb0 f0f9 	udiv	r0, r0, r9
 80018a0:	fb09 6610 	mls	r6, r9, r0, r6
 80018a4:	f7ff fc3c 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 80018a8:	fbb8 f8f9 	udiv	r8, r8, r9
 80018ac:	00f6      	lsls	r6, r6, #3
 80018ae:	6861      	ldr	r1, [r4, #4]
 80018b0:	3632      	adds	r6, #50	; 0x32
 80018b2:	fbb6 f6f9 	udiv	r6, r6, r9
 80018b6:	0076      	lsls	r6, r6, #1
 80018b8:	4368      	muls	r0, r5
 80018ba:	0049      	lsls	r1, r1, #1
 80018bc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80018c0:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 80018c4:	fbb0 faf1 	udiv	sl, r0, r1
 80018c8:	f7ff fc2a 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 80018cc:	4345      	muls	r5, r0
 80018ce:	6860      	ldr	r0, [r4, #4]
 80018d0:	0040      	lsls	r0, r0, #1
 80018d2:	fbb5 f0f0 	udiv	r0, r5, r0
 80018d6:	fbb0 f0f9 	udiv	r0, r0, r9
 80018da:	fb09 a210 	mls	r2, r9, r0, sl
 80018de:	00d2      	lsls	r2, r2, #3
 80018e0:	3232      	adds	r2, #50	; 0x32
 80018e2:	fbb2 f3f9 	udiv	r3, r2, r9
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	4443      	add	r3, r8
 80018ec:	441e      	add	r6, r3
 80018ee:	60be      	str	r6, [r7, #8]
 80018f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80018f4:	429f      	cmp	r7, r3
 80018f6:	d002      	beq.n	80018fe <UART_SetConfig+0x14a>
 80018f8:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <UART_SetConfig+0x238>)
 80018fa:	429f      	cmp	r7, r3
 80018fc:	d130      	bne.n	8001960 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018fe:	f7ff fc27 	bl	8001150 <HAL_RCC_GetPCLK2Freq>
 8001902:	6863      	ldr	r3, [r4, #4]
 8001904:	2519      	movs	r5, #25
 8001906:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800190a:	4368      	muls	r0, r5
 800190c:	fbb0 f8f8 	udiv	r8, r0, r8
 8001910:	f7ff fc1e 	bl	8001150 <HAL_RCC_GetPCLK2Freq>
 8001914:	6866      	ldr	r6, [r4, #4]
 8001916:	4368      	muls	r0, r5
 8001918:	00b6      	lsls	r6, r6, #2
 800191a:	fbb0 f6f6 	udiv	r6, r0, r6
 800191e:	f7ff fc17 	bl	8001150 <HAL_RCC_GetPCLK2Freq>
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4368      	muls	r0, r5
 800192c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001930:	fbb0 f0f9 	udiv	r0, r0, r9
 8001934:	fb09 6610 	mls	r6, r9, r0, r6
 8001938:	f7ff fc0a 	bl	8001150 <HAL_RCC_GetPCLK2Freq>
 800193c:	fbb8 f8f9 	udiv	r8, r8, r9
 8001940:	6861      	ldr	r1, [r4, #4]
 8001942:	0136      	lsls	r6, r6, #4
 8001944:	4368      	muls	r0, r5
 8001946:	0089      	lsls	r1, r1, #2
 8001948:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800194c:	3632      	adds	r6, #50	; 0x32
 800194e:	fbb0 faf1 	udiv	sl, r0, r1
 8001952:	fbb6 f6f9 	udiv	r6, r6, r9
 8001956:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 800195a:	f7ff fbf9 	bl	8001150 <HAL_RCC_GetPCLK2Freq>
 800195e:	e02f      	b.n	80019c0 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001960:	f7ff fbde 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8001964:	6863      	ldr	r3, [r4, #4]
 8001966:	2519      	movs	r5, #25
 8001968:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800196c:	4368      	muls	r0, r5
 800196e:	fbb0 f8f8 	udiv	r8, r0, r8
 8001972:	f7ff fbd5 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8001976:	6866      	ldr	r6, [r4, #4]
 8001978:	4368      	muls	r0, r5
 800197a:	00b6      	lsls	r6, r6, #2
 800197c:	fbb0 f6f6 	udiv	r6, r0, r6
 8001980:	f7ff fbce 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8001984:	6863      	ldr	r3, [r4, #4]
 8001986:	f04f 0964 	mov.w	r9, #100	; 0x64
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4368      	muls	r0, r5
 800198e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001992:	fbb0 f0f9 	udiv	r0, r0, r9
 8001996:	fb09 6610 	mls	r6, r9, r0, r6
 800199a:	f7ff fbc1 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 800199e:	fbb8 f8f9 	udiv	r8, r8, r9
 80019a2:	6861      	ldr	r1, [r4, #4]
 80019a4:	0136      	lsls	r6, r6, #4
 80019a6:	3632      	adds	r6, #50	; 0x32
 80019a8:	4368      	muls	r0, r5
 80019aa:	fbb6 f6f9 	udiv	r6, r6, r9
 80019ae:	0089      	lsls	r1, r1, #2
 80019b0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80019b4:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 80019b8:	fbb0 faf1 	udiv	sl, r0, r1
 80019bc:	f7ff fbb0 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 80019c0:	4345      	muls	r5, r0
 80019c2:	6860      	ldr	r0, [r4, #4]
 80019c4:	0080      	lsls	r0, r0, #2
 80019c6:	fbb5 f0f0 	udiv	r0, r5, r0
 80019ca:	fbb0 f0f9 	udiv	r0, r0, r9
 80019ce:	fb09 a210 	mls	r2, r9, r0, sl
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	3232      	adds	r2, #50	; 0x32
 80019d6:	fbb2 f3f9 	udiv	r3, r2, r9
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	4433      	add	r3, r6
 80019e0:	4443      	add	r3, r8
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019e8:	40011000 	.word	0x40011000
 80019ec:	40011400 	.word	0x40011400

080019f0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f0:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80019f2:	4604      	mov	r4, r0
 80019f4:	b340      	cbz	r0, 8001a48 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80019f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019fe:	b91b      	cbnz	r3, 8001a08 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a00:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001a04:	f001 fa60 	bl	8002ec8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a08:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a0a:	2324      	movs	r3, #36	; 0x24
 8001a0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a10:	68d3      	ldr	r3, [r2, #12]
 8001a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a16:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f7ff fecb 	bl	80017b4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a26:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a2e:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a36:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a38:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001a3a:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a3c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001a3e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001a42:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8001a46:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001a48:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001a4a:	bd10      	pop	{r4, pc}

08001a4c <HAL_UART_TxCpltCallback>:
 8001a4c:	4770      	bx	lr

08001a4e <HAL_UART_RxCpltCallback>:
 8001a4e:	4770      	bx	lr

08001a50 <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001a50:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001a54:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a56:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001a58:	d132      	bne.n	8001ac0 <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a5a:	6883      	ldr	r3, [r0, #8]
 8001a5c:	6901      	ldr	r1, [r0, #16]
 8001a5e:	6802      	ldr	r2, [r0, #0]
 8001a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a64:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a66:	d10b      	bne.n	8001a80 <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001a68:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001a6a:	b921      	cbnz	r1, 8001a76 <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a70:	f823 2b02 	strh.w	r2, [r3], #2
 8001a74:	e002      	b.n	8001a7c <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8001a7c:	6283      	str	r3, [r0, #40]	; 0x28
 8001a7e:	e00a      	b.n	8001a96 <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001a80:	b919      	cbnz	r1, 8001a8a <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 8001a82:	1c59      	adds	r1, r3, #1
 8001a84:	6281      	str	r1, [r0, #40]	; 0x28
 8001a86:	6852      	ldr	r2, [r2, #4]
 8001a88:	e004      	b.n	8001a94 <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8001a8a:	6852      	ldr	r2, [r2, #4]
 8001a8c:	1c59      	adds	r1, r3, #1
 8001a8e:	6281      	str	r1, [r0, #40]	; 0x28
 8001a90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a94:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001a96:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001a98:	3c01      	subs	r4, #1
 8001a9a:	b2a4      	uxth	r4, r4
 8001a9c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001a9e:	b98c      	cbnz	r4, 8001ac4 <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001aa0:	6803      	ldr	r3, [r0, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001aa8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8001ab8:	f7ff ffc9 	bl	8001a4e <HAL_UART_RxCpltCallback>
 8001abc:	4620      	mov	r0, r4
 8001abe:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
      }
    }

    if(--huart->RxXferCount == 0U)
 8001ac4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001ac6:	bd10      	pop	{r4, pc}

08001ac8 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001acc:	6803      	ldr	r3, [r0, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ad0:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ad2:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8001ad4:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ad6:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ad8:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8001ada:	d107      	bne.n	8001aec <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001adc:	0696      	lsls	r6, r2, #26
 8001ade:	d55a      	bpl.n	8001b96 <HAL_UART_IRQHandler+0xca>
 8001ae0:	068d      	lsls	r5, r1, #26
 8001ae2:	d558      	bpl.n	8001b96 <HAL_UART_IRQHandler+0xca>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 8001ae8:	f7ff bfb2 	b.w	8001a50 <UART_Receive_IT>
      return;
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001aec:	f015 0001 	ands.w	r0, r5, #1
 8001af0:	d102      	bne.n	8001af8 <HAL_UART_IRQHandler+0x2c>
 8001af2:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001af6:	d04e      	beq.n	8001b96 <HAL_UART_IRQHandler+0xca>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001af8:	07d3      	lsls	r3, r2, #31
 8001afa:	d505      	bpl.n	8001b08 <HAL_UART_IRQHandler+0x3c>
 8001afc:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001afe:	bf42      	ittt	mi
 8001b00:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001b02:	f043 0301 	orrmi.w	r3, r3, #1
 8001b06:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b08:	0755      	lsls	r5, r2, #29
 8001b0a:	d504      	bpl.n	8001b16 <HAL_UART_IRQHandler+0x4a>
 8001b0c:	b118      	cbz	r0, 8001b16 <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b16:	0793      	lsls	r3, r2, #30
 8001b18:	d504      	bpl.n	8001b24 <HAL_UART_IRQHandler+0x58>
 8001b1a:	b118      	cbz	r0, 8001b24 <HAL_UART_IRQHandler+0x58>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b24:	0716      	lsls	r6, r2, #28
 8001b26:	d504      	bpl.n	8001b32 <HAL_UART_IRQHandler+0x66>
 8001b28:	b118      	cbz	r0, 8001b32 <HAL_UART_IRQHandler+0x66>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	63e3      	str	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d066      	beq.n	8001c06 <HAL_UART_IRQHandler+0x13a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b38:	0695      	lsls	r5, r2, #26
 8001b3a:	d504      	bpl.n	8001b46 <HAL_UART_IRQHandler+0x7a>
 8001b3c:	0688      	lsls	r0, r1, #26
 8001b3e:	d502      	bpl.n	8001b46 <HAL_UART_IRQHandler+0x7a>
      {
        UART_Receive_IT(huart);
 8001b40:	4620      	mov	r0, r4
 8001b42:	f7ff ff85 	bl	8001a50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b4c:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b4e:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b50:	d402      	bmi.n	8001b58 <HAL_UART_IRQHandler+0x8c>
 8001b52:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 8001b56:	d01a      	beq.n	8001b8e <HAL_UART_IRQHandler+0xc2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b58:	f7ff fe1e 	bl	8001798 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	0652      	lsls	r2, r2, #25
 8001b62:	d510      	bpl.n	8001b86 <HAL_UART_IRQHandler+0xba>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b64:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001b66:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b6c:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001b6e:	b150      	cbz	r0, 8001b86 <HAL_UART_IRQHandler+0xba>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b70:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <HAL_UART_IRQHandler+0x13c>)
 8001b72:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b74:	f7fe ff70 	bl	8000a58 <HAL_DMA_Abort_IT>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d044      	beq.n	8001c06 <HAL_UART_IRQHandler+0x13a>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b82:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b84:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7ff ff9e 	bl	8001ac8 <HAL_UART_ErrorCallback>
 8001b8c:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001b8e:	f7ff ff9b 	bl	8001ac8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b92:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b96:	0616      	lsls	r6, r2, #24
 8001b98:	d527      	bpl.n	8001bea <HAL_UART_IRQHandler+0x11e>
 8001b9a:	060d      	lsls	r5, r1, #24
 8001b9c:	d525      	bpl.n	8001bea <HAL_UART_IRQHandler+0x11e>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001b9e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001ba2:	2a21      	cmp	r2, #33	; 0x21
 8001ba4:	d12f      	bne.n	8001c06 <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ba6:	68a2      	ldr	r2, [r4, #8]
 8001ba8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001bac:	6a22      	ldr	r2, [r4, #32]
 8001bae:	d10a      	bne.n	8001bc6 <HAL_UART_IRQHandler+0xfa>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8001bb0:	8811      	ldrh	r1, [r2, #0]
 8001bb2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001bb6:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001bb8:	6921      	ldr	r1, [r4, #16]
 8001bba:	b909      	cbnz	r1, 8001bc0 <HAL_UART_IRQHandler+0xf4>
      {
        huart->pTxBuffPtr += 2U;
 8001bbc:	3202      	adds	r2, #2
 8001bbe:	e000      	b.n	8001bc2 <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001bc0:	3201      	adds	r2, #1
 8001bc2:	6222      	str	r2, [r4, #32]
 8001bc4:	e003      	b.n	8001bce <HAL_UART_IRQHandler+0x102>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 8001bc6:	1c51      	adds	r1, r2, #1
 8001bc8:	6221      	str	r1, [r4, #32]
 8001bca:	7812      	ldrb	r2, [r2, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001bce:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001bd0:	3a01      	subs	r2, #1
 8001bd2:	b292      	uxth	r2, r2
 8001bd4:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001bd6:	b9b2      	cbnz	r2, 8001c06 <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001bea:	0650      	lsls	r0, r2, #25
 8001bec:	d50b      	bpl.n	8001c06 <HAL_UART_IRQHandler+0x13a>
 8001bee:	064a      	lsls	r2, r1, #25
 8001bf0:	d509      	bpl.n	8001c06 <HAL_UART_IRQHandler+0x13a>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bf8:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8001c00:	4620      	mov	r0, r4
 8001c02:	f7ff ff23 	bl	8001a4c <HAL_UART_TxCpltCallback>
 8001c06:	bd70      	pop	{r4, r5, r6, pc}
 8001c08:	08001c0d 	.word	0x08001c0d

08001c0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 8001c14:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8001c16:	f7ff ff57 	bl	8001ac8 <HAL_UART_ErrorCallback>
 8001c1a:	bd08      	pop	{r3, pc}

08001c1c <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8001c1c:	b510      	push	{r4, lr}
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 8001c1e:	4604      	mov	r4, r0
 8001c20:	b170      	cbz	r0, 8001c40 <HAL_WWDG_Init+0x24>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8001c22:	f001 f9ab 	bl	8002f7c <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8001c26:	68e3      	ldr	r3, [r4, #12]
 8001c28:	6821      	ldr	r1, [r4, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8001c2a:	6922      	ldr	r2, [r4, #16]

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c30:	600b      	str	r3, [r1, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8001c32:	6863      	ldr	r3, [r4, #4]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	68a3      	ldr	r3, [r4, #8]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]

  /* Return function status */
  return HAL_OK;
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
  {
    return HAL_ERROR;
 8001c40:	2001      	movs	r0, #1
  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));

  /* Return function status */
  return HAL_OK;
}
 8001c42:	bd10      	pop	{r4, pc}

08001c44 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c44:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001c46:	f000 fbf7 	bl	8002438 <vTaskStartScheduler>
  
  return osOK;
}
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	bd08      	pop	{r3, pc}

08001c4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c4e:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c50:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001c54:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c56:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c58:	e890 0042 	ldmia.w	r0, {r1, r6}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c5c:	b086      	sub	sp, #24
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001c5e:	2c84      	cmp	r4, #132	; 0x84
 8001c60:	f04f 0500 	mov.w	r5, #0
    fpriority += (priority - osPriorityIdle);
 8001c64:	bf14      	ite	ne
 8001c66:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c68:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c6a:	a805      	add	r0, sp, #20
 8001c6c:	9001      	str	r0, [sp, #4]
 8001c6e:	9503      	str	r5, [sp, #12]
 8001c70:	9502      	str	r5, [sp, #8]
 8001c72:	9400      	str	r4, [sp, #0]
 8001c74:	4630      	mov	r0, r6
 8001c76:	f000 fbc1 	bl	80023fc <xTaskGenericCreate>
 8001c7a:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8001c7c:	bf0c      	ite	eq
 8001c7e:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8001c80:	2000      	movne	r0, #0
  }
  
  return handle;
}
 8001c82:	b006      	add	sp, #24
 8001c84:	bd70      	pop	{r4, r5, r6, pc}

08001c86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001c86:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	bf08      	it	eq
 8001c8c:	2001      	moveq	r0, #1
 8001c8e:	f000 fd21 	bl	80026d4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001c92:	2000      	movs	r0, #0
 8001c94:	bd08      	pop	{r3, pc}

08001c96 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001c96:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c98:	f000 fddc 	bl	8002854 <xTaskGetSchedulerState>
 8001c9c:	2801      	cmp	r0, #1
 8001c9e:	d003      	beq.n	8001ca8 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001ca0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001ca4:	f000 b8fe 	b.w	8001ea4 <xPortSysTickHandler>
 8001ca8:	bd08      	pop	{r3, pc}

08001caa <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001caa:	f100 0308 	add.w	r3, r0, #8
 8001cae:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cb4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cb6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001cb8:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cba:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001cbc:	6003      	str	r3, [r0, #0]
 8001cbe:	4770      	bx	lr

08001cc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	6103      	str	r3, [r0, #16]
 8001cc4:	4770      	bx	lr

08001cc6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001cc6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001cc8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cd2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001cd4:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cd6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001cd8:	3301      	adds	r3, #1
 8001cda:	6003      	str	r3, [r0, #0]
 8001cdc:	4770      	bx	lr

08001cde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cde:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ce0:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ce2:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ce4:	d101      	bne.n	8001cea <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ce6:	6903      	ldr	r3, [r0, #16]
 8001ce8:	e007      	b.n	8001cfa <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cea:	f100 0308 	add.w	r3, r0, #8
 8001cee:	685c      	ldr	r4, [r3, #4]
 8001cf0:	6825      	ldr	r5, [r4, #0]
 8001cf2:	42aa      	cmp	r2, r5
 8001cf4:	d301      	bcc.n	8001cfa <vListInsert+0x1c>
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	e7f9      	b.n	8001cee <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cfe:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d00:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d02:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d04:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d06:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001d08:	3301      	adds	r3, #1
 8001d0a:	6003      	str	r3, [r0, #0]
 8001d0c:	bd30      	pop	{r4, r5, pc}

08001d0e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d0e:	6841      	ldr	r1, [r0, #4]
 8001d10:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d12:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d14:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d16:	6882      	ldr	r2, [r0, #8]
 8001d18:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d1e:	bf08      	it	eq
 8001d20:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d22:	2200      	movs	r2, #0
 8001d24:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	3801      	subs	r0, #1
 8001d2a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001d2c:	4770      	bx	lr
	...

08001d30 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <prvTaskExitError+0x2c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	d008      	beq.n	8001d4a <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3c:	f383 8811 	msr	BASEPRI, r3
 8001d40:	f3bf 8f6f 	isb	sy
 8001d44:	f3bf 8f4f 	dsb	sy
 8001d48:	e7fe      	b.n	8001d48 <prvTaskExitError+0x18>
 8001d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	e7fe      	b.n	8001d5a <prvTaskExitError+0x2a>
 8001d5c:	20000004 	.word	0x20000004

08001d60 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001d60:	4806      	ldr	r0, [pc, #24]	; (8001d7c <prvPortStartFirstTask+0x1c>)
 8001d62:	6800      	ldr	r0, [r0, #0]
 8001d64:	6800      	ldr	r0, [r0, #0]
 8001d66:	f380 8808 	msr	MSP, r0
 8001d6a:	b662      	cpsie	i
 8001d6c:	b661      	cpsie	f
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	f3bf 8f6f 	isb	sy
 8001d76:	df00      	svc	0
 8001d78:	bf00      	nop
 8001d7a:	0000      	.short	0x0000
 8001d7c:	e000ed08 	.word	0xe000ed08

08001d80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001d80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001d90 <vPortEnableVFP+0x10>
 8001d84:	6801      	ldr	r1, [r0, #0]
 8001d86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001d8a:	6001      	str	r1, [r0, #0]
 8001d8c:	4770      	bx	lr
 8001d8e:	0000      	.short	0x0000
 8001d90:	e000ed88 	.word	0xe000ed88

08001d94 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001d98:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <pxPortInitialiseStack+0x20>)
 8001d9e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001da2:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001da6:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001daa:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8001dae:	3844      	subs	r0, #68	; 0x44
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	08001d31 	.word	0x08001d31

08001db8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <pxCurrentTCBConst2>)
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	6808      	ldr	r0, [r1, #0]
 8001dbe:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dc2:	f380 8809 	msr	PSP, r0
 8001dc6:	f3bf 8f6f 	isb	sy
 8001dca:	f04f 0000 	mov.w	r0, #0
 8001dce:	f380 8811 	msr	BASEPRI, r0
 8001dd2:	4770      	bx	lr

08001dd4 <pxCurrentTCBConst2>:
 8001dd4:	20003d10 	.word	0x20003d10

08001dd8 <vPortEnterCritical>:
 8001dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <vPortEnterCritical+0x3c>)
 8001dea:	6813      	ldr	r3, [r2, #0]
 8001dec:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001dee:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001df0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001df2:	d10d      	bne.n	8001e10 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <vPortEnterCritical+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001dfc:	d008      	beq.n	8001e10 <vPortEnterCritical+0x38>
 8001dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e02:	f383 8811 	msr	BASEPRI, r3
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	f3bf 8f4f 	dsb	sy
 8001e0e:	e7fe      	b.n	8001e0e <vPortEnterCritical+0x36>
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000004 	.word	0x20000004
 8001e18:	e000ed04 	.word	0xe000ed04

08001e1c <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001e1c:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <vPortExitCritical+0x24>)
 8001e1e:	6813      	ldr	r3, [r2, #0]
 8001e20:	b943      	cbnz	r3, 8001e34 <vPortExitCritical+0x18>
 8001e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e26:	f383 8811 	msr	BASEPRI, r3
 8001e2a:	f3bf 8f6f 	isb	sy
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	e7fe      	b.n	8001e32 <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001e34:	3b01      	subs	r3, #1
 8001e36:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001e38:	b90b      	cbnz	r3, 8001e3e <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e3a:	f383 8811 	msr	BASEPRI, r3
 8001e3e:	4770      	bx	lr
 8001e40:	20000004 	.word	0x20000004

08001e44 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001e44:	f3ef 8009 	mrs	r0, PSP
 8001e48:	f3bf 8f6f 	isb	sy
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <pxCurrentTCBConst>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	f01e 0f10 	tst.w	lr, #16
 8001e54:	bf08      	it	eq
 8001e56:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001e5a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e5e:	6010      	str	r0, [r2, #0]
 8001e60:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001e64:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e68:	f380 8811 	msr	BASEPRI, r0
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	f3bf 8f6f 	isb	sy
 8001e74:	f000 fca8 	bl	80027c8 <vTaskSwitchContext>
 8001e78:	f04f 0000 	mov.w	r0, #0
 8001e7c:	f380 8811 	msr	BASEPRI, r0
 8001e80:	bc08      	pop	{r3}
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	6808      	ldr	r0, [r1, #0]
 8001e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e8a:	f01e 0f10 	tst.w	lr, #16
 8001e8e:	bf08      	it	eq
 8001e90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001e94:	f380 8809 	msr	PSP, r0
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <pxCurrentTCBConst>:
 8001ea0:	20003d10 	.word	0x20003d10

08001ea4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001ea4:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8001eaa:	f04f 0250 	mov.w	r2, #80	; 0x50
 8001eae:	f382 8811 	msr	BASEPRI, r2
 8001eb2:	f3bf 8f6f 	isb	sy
 8001eb6:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001eba:	f000 fafd 	bl	80024b8 <xTaskIncrementTick>
 8001ebe:	b118      	cbz	r0, 8001ec8 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <xPortSysTickHandler+0x2c>)
 8001ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ec6:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f383 8811 	msr	BASEPRI, r3
 8001ece:	bd08      	pop	{r3, pc}
 8001ed0:	e000ed04 	.word	0xe000ed04

08001ed4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <vPortSetupTimerInterrupt+0x1c>)
 8001ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <vPortSetupTimerInterrupt+0x20>)
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <vPortSetupTimerInterrupt+0x24>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	e000e014 	.word	0xe000e014
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001efc:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <xPortStartScheduler+0xc8>)
 8001efe:	4a32      	ldr	r2, [pc, #200]	; (8001fc8 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001f00:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	4291      	cmp	r1, r2
 8001f06:	d108      	bne.n	8001f1a <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0c:	f383 8811 	msr	BASEPRI, r3
 8001f10:	f3bf 8f6f 	isb	sy
 8001f14:	f3bf 8f4f 	dsb	sy
 8001f18:	e7fe      	b.n	8001f18 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <xPortStartScheduler+0xd0>)
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d108      	bne.n	8001f34 <xPortStartScheduler+0x38>
 8001f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f26:	f383 8811 	msr	BASEPRI, r3
 8001f2a:	f3bf 8f6f 	isb	sy
 8001f2e:	f3bf 8f4f 	dsb	sy
 8001f32:	e7fe      	b.n	8001f32 <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <xPortStartScheduler+0xd4>)
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001f3c:	22ff      	movs	r2, #255	; 0xff
 8001f3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f40:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f42:	4a24      	ldr	r2, [pc, #144]	; (8001fd4 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001f4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f52:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001f54:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <xPortStartScheduler+0xdc>)
 8001f56:	2207      	movs	r2, #7
 8001f58:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001f60:	0600      	lsls	r0, r0, #24
 8001f62:	f102 34ff 	add.w	r4, r2, #4294967295
 8001f66:	d508      	bpl.n	8001f7a <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001f68:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001f6c:	0052      	lsls	r2, r2, #1
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f88d 2003 	strb.w	r2, [sp, #3]
 8001f74:	2101      	movs	r1, #1
 8001f76:	4622      	mov	r2, r4
 8001f78:	e7f0      	b.n	8001f5c <xPortStartScheduler+0x60>
 8001f7a:	b101      	cbz	r1, 8001f7e <xPortStartScheduler+0x82>
 8001f7c:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	0212      	lsls	r2, r2, #8
 8001f82:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001f86:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001f88:	9b01      	ldr	r3, [sp, #4]
 8001f8a:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <xPortStartScheduler+0xd4>)
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <xPortStartScheduler+0xe0>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001f98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001fa0:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001fa2:	f7ff ff97 	bl	8001ed4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <xPortStartScheduler+0xe4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001fac:	f7ff fee8 	bl	8001d80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001fb0:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <xPortStartScheduler+0xe8>)
 8001fb2:	6813      	ldr	r3, [r2, #0]
 8001fb4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001fb8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001fba:	f7ff fed1 	bl	8001d60 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001fbe:	f7ff feb7 	bl	8001d30 <prvTaskExitError>
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00
 8001fc8:	410fc271 	.word	0x410fc271
 8001fcc:	410fc270 	.word	0x410fc270
 8001fd0:	e000e400 	.word	0xe000e400
 8001fd4:	20000024 	.word	0x20000024
 8001fd8:	20000028 	.word	0x20000028
 8001fdc:	e000ed20 	.word	0xe000ed20
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	e000ef34 	.word	0xe000ef34

08001fe8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001fe8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <prvInsertBlockIntoFreeList+0x40>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4282      	cmp	r2, r0
 8001ff0:	d201      	bcs.n	8001ff6 <prvInsertBlockIntoFreeList+0xe>
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	e7fa      	b.n	8001fec <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	185c      	adds	r4, r3, r1
 8001ffa:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ffc:	bf01      	itttt	eq
 8001ffe:	6840      	ldreq	r0, [r0, #4]
 8002000:	1809      	addeq	r1, r1, r0
 8002002:	4618      	moveq	r0, r3
 8002004:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002006:	6841      	ldr	r1, [r0, #4]
 8002008:	1844      	adds	r4, r0, r1
 800200a:	42a2      	cmp	r2, r4
 800200c:	d107      	bne.n	800201e <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800200e:	4c07      	ldr	r4, [pc, #28]	; (800202c <prvInsertBlockIntoFreeList+0x44>)
 8002010:	6824      	ldr	r4, [r4, #0]
 8002012:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002014:	bf1f      	itttt	ne
 8002016:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002018:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800201a:	1909      	addne	r1, r1, r4
 800201c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800201e:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002020:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002022:	bf18      	it	ne
 8002024:	6018      	strne	r0, [r3, #0]
 8002026:	bd10      	pop	{r4, pc}
 8002028:	20000034 	.word	0x20000034
 800202c:	20000030 	.word	0x20000030

08002030 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002034:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8002036:	f000 fa37 	bl	80024a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800203a:	4940      	ldr	r1, [pc, #256]	; (800213c <pvPortMalloc+0x10c>)
 800203c:	4d40      	ldr	r5, [pc, #256]	; (8002140 <pvPortMalloc+0x110>)
 800203e:	680b      	ldr	r3, [r1, #0]
 8002040:	bb0b      	cbnz	r3, 8002086 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002042:	4a40      	ldr	r2, [pc, #256]	; (8002144 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002044:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002046:	bf1f      	itttt	ne
 8002048:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800204a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800204e:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8002052:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002054:	bf14      	ite	ne
 8002056:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002058:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800205c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800205e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002060:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002064:	4e38      	ldr	r6, [pc, #224]	; (8002148 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8002066:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8002068:	2000      	movs	r0, #0
 800206a:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800206c:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 800206e:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002070:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002072:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002074:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002078:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800207a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800207c:	4b34      	ldr	r3, [pc, #208]	; (8002150 <pvPortMalloc+0x120>)
 800207e:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002080:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002084:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002086:	682f      	ldr	r7, [r5, #0]
 8002088:	4227      	tst	r7, r4
 800208a:	d146      	bne.n	800211a <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800208c:	2c00      	cmp	r4, #0
 800208e:	d045      	beq.n	800211c <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 8002090:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002094:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002096:	bf1c      	itt	ne
 8002098:	f023 0307 	bicne.w	r3, r3, #7
 800209c:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d039      	beq.n	8002116 <pvPortMalloc+0xe6>
 80020a2:	4a2b      	ldr	r2, [pc, #172]	; (8002150 <pvPortMalloc+0x120>)
 80020a4:	6816      	ldr	r6, [r2, #0]
 80020a6:	42b3      	cmp	r3, r6
 80020a8:	4690      	mov	r8, r2
 80020aa:	d836      	bhi.n	800211a <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80020ac:	4a26      	ldr	r2, [pc, #152]	; (8002148 <pvPortMalloc+0x118>)
 80020ae:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020b0:	6868      	ldr	r0, [r5, #4]
 80020b2:	4283      	cmp	r3, r0
 80020b4:	d803      	bhi.n	80020be <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80020b6:	6809      	ldr	r1, [r1, #0]
 80020b8:	428d      	cmp	r5, r1
 80020ba:	d106      	bne.n	80020ca <pvPortMalloc+0x9a>
 80020bc:	e02d      	b.n	800211a <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020be:	682c      	ldr	r4, [r5, #0]
 80020c0:	2c00      	cmp	r4, #0
 80020c2:	d0f8      	beq.n	80020b6 <pvPortMalloc+0x86>
 80020c4:	462a      	mov	r2, r5
 80020c6:	4625      	mov	r5, r4
 80020c8:	e7f2      	b.n	80020b0 <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80020ca:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80020cc:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80020ce:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80020d0:	1ac2      	subs	r2, r0, r3
 80020d2:	2a10      	cmp	r2, #16
 80020d4:	d90f      	bls.n	80020f6 <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80020d6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80020d8:	0741      	lsls	r1, r0, #29
 80020da:	d008      	beq.n	80020ee <pvPortMalloc+0xbe>
 80020dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e0:	f383 8811 	msr	BASEPRI, r3
 80020e4:	f3bf 8f6f 	isb	sy
 80020e8:	f3bf 8f4f 	dsb	sy
 80020ec:	e7fe      	b.n	80020ec <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80020ee:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80020f0:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80020f2:	f7ff ff79 	bl	8001fe8 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80020f6:	4915      	ldr	r1, [pc, #84]	; (800214c <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80020f8:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80020fa:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80020fc:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80020fe:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002100:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8002102:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002106:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800210a:	bf38      	it	cc
 800210c:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800210e:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002110:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002112:	602b      	str	r3, [r5, #0]
 8002114:	e002      	b.n	800211c <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002116:	461c      	mov	r4, r3
 8002118:	e000      	b.n	800211c <pvPortMalloc+0xec>
 800211a:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800211c:	f000 fa64 	bl	80025e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002120:	0763      	lsls	r3, r4, #29
 8002122:	d008      	beq.n	8002136 <pvPortMalloc+0x106>
 8002124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	e7fe      	b.n	8002134 <pvPortMalloc+0x104>
	return pvReturn;
}
 8002136:	4620      	mov	r0, r4
 8002138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800213c:	20000030 	.word	0x20000030
 8002140:	20003c3c 	.word	0x20003c3c
 8002144:	2000003c 	.word	0x2000003c
 8002148:	20000034 	.word	0x20000034
 800214c:	20003c40 	.word	0x20003c40
 8002150:	2000002c 	.word	0x2000002c

08002154 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002154:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8002156:	4604      	mov	r4, r0
 8002158:	b370      	cbz	r0, 80021b8 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <vPortFree+0x68>)
 800215c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	4213      	tst	r3, r2
 8002164:	d108      	bne.n	8002178 <vPortFree+0x24>
 8002166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216a:	f383 8811 	msr	BASEPRI, r3
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	f3bf 8f4f 	dsb	sy
 8002176:	e7fe      	b.n	8002176 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002178:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800217c:	b141      	cbz	r1, 8002190 <vPortFree+0x3c>
 800217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002182:	f383 8811 	msr	BASEPRI, r3
 8002186:	f3bf 8f6f 	isb	sy
 800218a:	f3bf 8f4f 	dsb	sy
 800218e:	e7fe      	b.n	800218e <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002190:	ea23 0302 	bic.w	r3, r3, r2
 8002194:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8002198:	f000 f986 	bl	80024a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800219c:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <vPortFree+0x6c>)
 800219e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80021a2:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80021a4:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80021a8:	440b      	add	r3, r1
 80021aa:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80021ac:	f7ff ff1c 	bl	8001fe8 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80021b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 80021b4:	f000 ba18 	b.w	80025e8 <xTaskResumeAll>
 80021b8:	bd10      	pop	{r4, pc}
 80021ba:	bf00      	nop
 80021bc:	20003c3c 	.word	0x20003c3c
 80021c0:	2000002c 	.word	0x2000002c

080021c4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021c4:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <prvResetNextTaskUnblockTime+0x1c>)
 80021c6:	6813      	ldr	r3, [r2, #0]
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <prvResetNextTaskUnblockTime+0x20>)
 80021cc:	b911      	cbnz	r1, 80021d4 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80021ce:	f04f 32ff 	mov.w	r2, #4294967295
 80021d2:	e003      	b.n	80021dc <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80021d8:	68d2      	ldr	r2, [r2, #12]
 80021da:	6852      	ldr	r2, [r2, #4]
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	4770      	bx	lr
 80021e0:	20003c48 	.word	0x20003c48
 80021e4:	20003d14 	.word	0x20003d14

080021e8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <prvAddCurrentTaskToDelayedList+0x3c>)
 80021ea:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80021ec:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80021ee:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <prvAddCurrentTaskToDelayedList+0x40>)
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4290      	cmp	r0, r2
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80021f6:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 80021f8:	d207      	bcs.n	800220a <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80021fa:	4a0c      	ldr	r2, [pc, #48]	; (800222c <prvAddCurrentTaskToDelayedList+0x44>)
 80021fc:	6810      	ldr	r0, [r2, #0]
 80021fe:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002204:	3104      	adds	r1, #4
 8002206:	f7ff bd6a 	b.w	8001cde <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <prvAddCurrentTaskToDelayedList+0x48>)
 800220c:	6810      	ldr	r0, [r2, #0]
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	3104      	adds	r1, #4
 8002212:	f7ff fd64 	bl	8001cde <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <prvAddCurrentTaskToDelayedList+0x4c>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 800221c:	bf38      	it	cc
 800221e:	601c      	strcc	r4, [r3, #0]
 8002220:	bd10      	pop	{r4, pc}
 8002222:	bf00      	nop
 8002224:	20003d10 	.word	0x20003d10
 8002228:	20003d18 	.word	0x20003d18
 800222c:	20003d1c 	.word	0x20003d1c
 8002230:	20003c48 	.word	0x20003c48
 8002234:	20003d14 	.word	0x20003d14

08002238 <xTaskGenericCreate.part.5>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8002238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800223c:	469a      	mov	sl, r3
 800223e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002240:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002242:	4681      	mov	r9, r0
 8002244:	460e      	mov	r6, r1
 8002246:	4615      	mov	r5, r2
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002248:	b93b      	cbnz	r3, 800225a <xTaskGenericCreate.part.5+0x22>
 800224a:	0090      	lsls	r0, r2, #2
 800224c:	f7ff fef0 	bl	8002030 <pvPortMalloc>

		if( pxStack != NULL )
 8002250:	4683      	mov	fp, r0
 8002252:	2800      	cmp	r0, #0
 8002254:	f000 80b2 	beq.w	80023bc <xTaskGenericCreate.part.5+0x184>
 8002258:	e000      	b.n	800225c <xTaskGenericCreate.part.5+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800225a:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800225c:	206c      	movs	r0, #108	; 0x6c
 800225e:	f7ff fee7 	bl	8002030 <pvPortMalloc>

			if( pxNewTCB != NULL )
 8002262:	4604      	mov	r4, r0
 8002264:	b188      	cbz	r0, 800228a <xTaskGenericCreate.part.5+0x52>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8002266:	00ad      	lsls	r5, r5, #2
 8002268:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 800226a:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800226e:	21a5      	movs	r1, #165	; 0xa5
 8002270:	4658      	mov	r0, fp
 8002272:	f000 ff35 	bl	80030e0 <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002276:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002278:	3d04      	subs	r5, #4
 800227a:	441d      	add	r5, r3
 800227c:	f025 0507 	bic.w	r5, r5, #7
 8002280:	1e73      	subs	r3, r6, #1
 8002282:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8002286:	361f      	adds	r6, #31
 8002288:	e005      	b.n	8002296 <xTaskGenericCreate.part.5+0x5e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 800228a:	4658      	mov	r0, fp
 800228c:	f7ff ff62 	bl	8002154 <vPortFree>
 8002290:	e094      	b.n	80023bc <xTaskGenericCreate.part.5+0x184>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002292:	429e      	cmp	r6, r3
 8002294:	d006      	beq.n	80022a4 <xTaskGenericCreate.part.5+0x6c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002296:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800229a:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800229e:	7819      	ldrb	r1, [r3, #0]
 80022a0:	2900      	cmp	r1, #0
 80022a2:	d1f6      	bne.n	8002292 <xTaskGenericCreate.part.5+0x5a>
 80022a4:	2f06      	cmp	r7, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022a6:	f04f 0800 	mov.w	r8, #0
 80022aa:	46bb      	mov	fp, r7
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80022ac:	f104 0604 	add.w	r6, r4, #4
 80022b0:	bf28      	it	cs
 80022b2:	f04f 0b06 	movcs.w	fp, #6
 80022b6:	4630      	mov	r0, r6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022b8:	f884 8053 	strb.w	r8, [r4, #83]	; 0x53
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 80022bc:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80022c0:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
		pxTCB->uxMutexesHeld = 0;
 80022c4:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80022c8:	f7ff fcfa 	bl	8001cc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80022cc:	f104 0018 	add.w	r0, r4, #24
 80022d0:	f7ff fcf6 	bl	8001cc0 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022d4:	f1cb 0307 	rsb	r3, fp, #7
 80022d8:	61a3      	str	r3, [r4, #24]
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 80022da:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80022de:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80022e0:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 80022e2:	f884 8068 	strb.w	r8, [r4, #104]	; 0x68
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022e6:	4652      	mov	r2, sl
 80022e8:	4649      	mov	r1, r9
 80022ea:	4628      	mov	r0, r5
 80022ec:	f7ff fd52 	bl	8001d94 <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80022f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022f2:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80022f4:	b103      	cbz	r3, 80022f8 <xTaskGenericCreate.part.5+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022f6:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80022f8:	f7ff fd6e 	bl	8001dd8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80022fc:	4a31      	ldr	r2, [pc, #196]	; (80023c4 <xTaskGenericCreate.part.5+0x18c>)
			if( pxCurrentTCB == NULL )
 80022fe:	4d32      	ldr	r5, [pc, #200]	; (80023c8 <xTaskGenericCreate.part.5+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8002300:	6813      	ldr	r3, [r2, #0]
 8002302:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80023f0 <xTaskGenericCreate.part.5+0x1b8>
 8002306:	3301      	adds	r3, #1
 8002308:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800230a:	682b      	ldr	r3, [r5, #0]
 800230c:	bb3b      	cbnz	r3, 800235e <xTaskGenericCreate.part.5+0x126>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 800230e:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	2a01      	cmp	r2, #1
 8002314:	d12b      	bne.n	800236e <xTaskGenericCreate.part.5+0x136>
 8002316:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002318:	eb09 0008 	add.w	r0, r9, r8
 800231c:	f108 0814 	add.w	r8, r8, #20
 8002320:	f7ff fcc3 	bl	8001caa <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002324:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 8002328:	d1f6      	bne.n	8002318 <xTaskGenericCreate.part.5+0xe0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800232a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80023f4 <xTaskGenericCreate.part.5+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
 800232e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80023f8 <xTaskGenericCreate.part.5+0x1c0>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002332:	4650      	mov	r0, sl
 8002334:	f7ff fcb9 	bl	8001caa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002338:	4640      	mov	r0, r8
 800233a:	f7ff fcb6 	bl	8001caa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800233e:	4823      	ldr	r0, [pc, #140]	; (80023cc <xTaskGenericCreate.part.5+0x194>)
 8002340:	f7ff fcb3 	bl	8001caa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002344:	4822      	ldr	r0, [pc, #136]	; (80023d0 <xTaskGenericCreate.part.5+0x198>)
 8002346:	f7ff fcb0 	bl	8001caa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800234a:	4822      	ldr	r0, [pc, #136]	; (80023d4 <xTaskGenericCreate.part.5+0x19c>)
 800234c:	f7ff fcad 	bl	8001caa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <xTaskGenericCreate.part.5+0x1a0>)
 8002352:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002356:	4b21      	ldr	r3, [pc, #132]	; (80023dc <xTaskGenericCreate.part.5+0x1a4>)
 8002358:	f8c3 8000 	str.w	r8, [r3]
 800235c:	e007      	b.n	800236e <xTaskGenericCreate.part.5+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <xTaskGenericCreate.part.5+0x1a8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	b923      	cbnz	r3, 800236e <xTaskGenericCreate.part.5+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
 800236a:	bf28      	it	cs
 800236c:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 800236e:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <xTaskGenericCreate.part.5+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002370:	491d      	ldr	r1, [pc, #116]	; (80023e8 <xTaskGenericCreate.part.5+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002372:	6813      	ldr	r3, [r2, #0]
 8002374:	3301      	adds	r3, #1
 8002376:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002378:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800237a:	6563      	str	r3, [r4, #84]	; 0x54
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800237c:	680b      	ldr	r3, [r1, #0]
 800237e:	2401      	movs	r4, #1
 8002380:	fa04 f002 	lsl.w	r0, r4, r2
 8002384:	4303      	orrs	r3, r0
 8002386:	2014      	movs	r0, #20
 8002388:	600b      	str	r3, [r1, #0]
 800238a:	fb00 9002 	mla	r0, r0, r2, r9
 800238e:	4631      	mov	r1, r6
 8002390:	f7ff fc99 	bl	8001cc6 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002394:	f7ff fd42 	bl	8001e1c <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <xTaskGenericCreate.part.5+0x1a8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	b15b      	cbz	r3, 80023b6 <xTaskGenericCreate.part.5+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800239e:	682b      	ldr	r3, [r5, #0]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	429f      	cmp	r7, r3
 80023a4:	d907      	bls.n	80023b6 <xTaskGenericCreate.part.5+0x17e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <xTaskGenericCreate.part.5+0x1b4>)
 80023a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80023b6:	4620      	mov	r0, r4
 80023b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 80023c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c4:	20003d60 	.word	0x20003d60
 80023c8:	20003d10 	.word	0x20003d10
 80023cc:	20003d20 	.word	0x20003d20
 80023d0:	20003c54 	.word	0x20003c54
 80023d4:	20003c68 	.word	0x20003c68
 80023d8:	20003c48 	.word	0x20003c48
 80023dc:	20003d1c 	.word	0x20003d1c
 80023e0:	20003c4c 	.word	0x20003c4c
 80023e4:	20003d34 	.word	0x20003d34
 80023e8:	20003d64 	.word	0x20003d64
 80023ec:	e000ed04 	.word	0xe000ed04
 80023f0:	20003c80 	.word	0x20003c80
 80023f4:	20003d38 	.word	0x20003d38
 80023f8:	20003d4c 	.word	0x20003d4c

080023fc <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80023fc:	b470      	push	{r4, r5, r6}
 80023fe:	ac03      	add	r4, sp, #12
 8002400:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8002402:	b940      	cbnz	r0, 8002416 <xTaskGenericCreate+0x1a>
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	e7fe      	b.n	8002414 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8002416:	2c06      	cmp	r4, #6
 8002418:	d908      	bls.n	800242c <xTaskGenericCreate+0x30>
 800241a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	e7fe      	b.n	800242a <xTaskGenericCreate+0x2e>
 800242c:	9605      	str	r6, [sp, #20]
 800242e:	9504      	str	r5, [sp, #16]
 8002430:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8002432:	bc70      	pop	{r4, r5, r6}
 8002434:	f7ff bf00 	b.w	8002238 <xTaskGenericCreate.part.5>

08002438 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800243a:	2400      	movs	r4, #0
 800243c:	9402      	str	r4, [sp, #8]
 800243e:	9401      	str	r4, [sp, #4]
 8002440:	9400      	str	r4, [sp, #0]
 8002442:	4623      	mov	r3, r4
 8002444:	2280      	movs	r2, #128	; 0x80
 8002446:	4913      	ldr	r1, [pc, #76]	; (8002494 <vTaskStartScheduler+0x5c>)
 8002448:	4813      	ldr	r0, [pc, #76]	; (8002498 <vTaskStartScheduler+0x60>)
 800244a:	f7ff fef5 	bl	8002238 <xTaskGenericCreate.part.5>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800244e:	2801      	cmp	r0, #1
 8002450:	d114      	bne.n	800247c <vTaskStartScheduler+0x44>
 8002452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002456:	f383 8811 	msr	BASEPRI, r3
 800245a:	f3bf 8f6f 	isb	sy
 800245e:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <vTaskStartScheduler+0x64>)
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <vTaskStartScheduler+0x68>)
 800246c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <vTaskStartScheduler+0x6c>)
 8002470:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8002472:	b004      	add	sp, #16
 8002474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002478:	f7ff bd40 	b.w	8001efc <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 800247c:	b940      	cbnz	r0, 8002490 <vTaskStartScheduler+0x58>
 800247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002482:	f383 8811 	msr	BASEPRI, r3
 8002486:	f3bf 8f6f 	isb	sy
 800248a:	f3bf 8f4f 	dsb	sy
 800248e:	e7fe      	b.n	800248e <vTaskStartScheduler+0x56>
	}
}
 8002490:	b004      	add	sp, #16
 8002492:	bd10      	pop	{r4, pc}
 8002494:	0800312c 	.word	0x0800312c
 8002498:	08002751 	.word	0x08002751
 800249c:	20003d14 	.word	0x20003d14
 80024a0:	20003c4c 	.word	0x20003c4c
 80024a4:	20003d18 	.word	0x20003d18

080024a8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80024a8:	4a02      	ldr	r2, [pc, #8]	; (80024b4 <vTaskSuspendAll+0xc>)
 80024aa:	6813      	ldr	r3, [r2, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20003d0c 	.word	0x20003d0c

080024b8 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024b8:	4b40      	ldr	r3, [pc, #256]	; (80025bc <xTaskIncrementTick+0x104>)
 80024ba:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80024bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d13c      	bne.n	800253e <xTaskIncrementTick+0x86>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80024c4:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <xTaskIncrementTick+0x108>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	3201      	adds	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80024cc:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 80024ce:	b9bd      	cbnz	r5, 8002500 <xTaskIncrementTick+0x48>
			{
				taskSWITCH_DELAYED_LISTS();
 80024d0:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <xTaskIncrementTick+0x10c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	b142      	cbz	r2, 80024ea <xTaskIncrementTick+0x32>
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	e7fe      	b.n	80024e8 <xTaskIncrementTick+0x30>
 80024ea:	4a37      	ldr	r2, [pc, #220]	; (80025c8 <xTaskIncrementTick+0x110>)
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	6810      	ldr	r0, [r2, #0]
 80024f0:	6018      	str	r0, [r3, #0]
 80024f2:	6011      	str	r1, [r2, #0]
 80024f4:	4a35      	ldr	r2, [pc, #212]	; (80025cc <xTaskIncrementTick+0x114>)
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	f7ff fe62 	bl	80021c4 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8002500:	4c33      	ldr	r4, [pc, #204]	; (80025d0 <xTaskIncrementTick+0x118>)
 8002502:	9401      	str	r4, [sp, #4]
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	4e33      	ldr	r6, [pc, #204]	; (80025d4 <xTaskIncrementTick+0x11c>)
 8002508:	4f33      	ldr	r7, [pc, #204]	; (80025d8 <xTaskIncrementTick+0x120>)
 800250a:	429d      	cmp	r5, r3
 800250c:	f04f 0b00 	mov.w	fp, #0
 8002510:	d30b      	bcc.n	800252a <xTaskIncrementTick+0x72>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002512:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80025c4 <xTaskIncrementTick+0x10c>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8002516:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80025e4 <xTaskIncrementTick+0x12c>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800251a:	f8d8 2000 	ldr.w	r2, [r8]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	b9a2      	cbnz	r2, 800254c <xTaskIncrementTick+0x94>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8002522:	9b01      	ldr	r3, [sp, #4]
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800252e:	2214      	movs	r2, #20
 8002530:	434a      	muls	r2, r1
 8002532:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8002534:	2a02      	cmp	r2, #2
 8002536:	bf28      	it	cs
 8002538:	f04f 0b01 	movcs.w	fp, #1
 800253c:	e034      	b.n	80025a8 <xTaskIncrementTick+0xf0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800253e:	4a27      	ldr	r2, [pc, #156]	; (80025dc <xTaskIncrementTick+0x124>)
 8002540:	6813      	ldr	r3, [r2, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002546:	f04f 0b00 	mov.w	fp, #0
 800254a:	e02d      	b.n	80025a8 <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800254c:	f8d8 2000 	ldr.w	r2, [r8]
 8002550:	68d2      	ldr	r2, [r2, #12]
 8002552:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8002554:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 8002556:	428d      	cmp	r5, r1
 8002558:	d202      	bcs.n	8002560 <xTaskIncrementTick+0xa8>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 800255a:	9b01      	ldr	r3, [sp, #4]
 800255c:	6019      	str	r1, [r3, #0]
							break;
 800255e:	e7e4      	b.n	800252a <xTaskIncrementTick+0x72>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002560:	f104 0a04 	add.w	sl, r4, #4
 8002564:	4650      	mov	r0, sl
 8002566:	f7ff fbd2 	bl	8001d0e <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800256a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800256c:	b119      	cbz	r1, 8002576 <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800256e:	f104 0018 	add.w	r0, r4, #24
 8002572:	f7ff fbcc 	bl	8001d0e <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8002576:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002578:	f8d9 1000 	ldr.w	r1, [r9]
 800257c:	2301      	movs	r3, #1
 800257e:	fa03 fe00 	lsl.w	lr, r3, r0
 8002582:	ea4e 0101 	orr.w	r1, lr, r1
 8002586:	f04f 0e14 	mov.w	lr, #20
 800258a:	f8c9 1000 	str.w	r1, [r9]
 800258e:	fb0e 6000 	mla	r0, lr, r0, r6
 8002592:	4651      	mov	r1, sl
 8002594:	f7ff fb97 	bl	8001cc6 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002598:	6838      	ldr	r0, [r7, #0]
 800259a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800259c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 800259e:	4291      	cmp	r1, r2
 80025a0:	bf28      	it	cs
 80025a2:	f04f 0b01 	movcs.w	fp, #1
 80025a6:	e7b8      	b.n	800251a <xTaskIncrementTick+0x62>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <xTaskIncrementTick+0x128>)
 80025aa:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 80025ac:	2a00      	cmp	r2, #0
 80025ae:	bf18      	it	ne
 80025b0:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80025b4:	4658      	mov	r0, fp
 80025b6:	b003      	add	sp, #12
 80025b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025bc:	20003d0c 	.word	0x20003d0c
 80025c0:	20003d18 	.word	0x20003d18
 80025c4:	20003c48 	.word	0x20003c48
 80025c8:	20003d1c 	.word	0x20003d1c
 80025cc:	20003c44 	.word	0x20003c44
 80025d0:	20003d14 	.word	0x20003d14
 80025d4:	20003c80 	.word	0x20003c80
 80025d8:	20003d10 	.word	0x20003d10
 80025dc:	20003c7c 	.word	0x20003c7c
 80025e0:	20003d68 	.word	0x20003d68
 80025e4:	20003d64 	.word	0x20003d64

080025e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80025ec:	4c30      	ldr	r4, [pc, #192]	; (80026b0 <xTaskResumeAll+0xc8>)
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	b943      	cbnz	r3, 8002604 <xTaskResumeAll+0x1c>
 80025f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	e7fe      	b.n	8002602 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002604:	f7ff fbe8 	bl	8001dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	3b01      	subs	r3, #1
 800260c:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	b10b      	cbz	r3, 8002616 <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8002612:	2400      	movs	r4, #0
 8002614:	e047      	b.n	80026a6 <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <xTaskResumeAll+0xcc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f9      	beq.n	8002612 <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800261e:	4d26      	ldr	r5, [pc, #152]	; (80026b8 <xTaskResumeAll+0xd0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8002620:	4e26      	ldr	r6, [pc, #152]	; (80026bc <xTaskResumeAll+0xd4>)
 8002622:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80026d0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002626:	682b      	ldr	r3, [r5, #0]
 8002628:	b303      	cbz	r3, 800266c <xTaskResumeAll+0x84>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800262a:	68eb      	ldr	r3, [r5, #12]
 800262c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800262e:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002632:	f104 0018 	add.w	r0, r4, #24
 8002636:	f7ff fb6a 	bl	8001d0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800263a:	4648      	mov	r0, r9
 800263c:	f7ff fb67 	bl	8001d0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002640:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002642:	6833      	ldr	r3, [r6, #0]
 8002644:	2701      	movs	r7, #1
 8002646:	fa07 f102 	lsl.w	r1, r7, r2
 800264a:	2014      	movs	r0, #20
 800264c:	430b      	orrs	r3, r1
 800264e:	fb00 8002 	mla	r0, r0, r2, r8
 8002652:	4649      	mov	r1, r9
 8002654:	6033      	str	r3, [r6, #0]
 8002656:	f7ff fb36 	bl	8001cc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800265a:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <xTaskResumeAll+0xd8>)
 800265c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	429a      	cmp	r2, r3
 8002664:	d3df      	bcc.n	8002626 <xTaskResumeAll+0x3e>
					{
						xYieldPending = pdTRUE;
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <xTaskResumeAll+0xdc>)
 8002668:	601f      	str	r7, [r3, #0]
 800266a:	e7da      	b.n	8002622 <xTaskResumeAll+0x3a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800266c:	4c16      	ldr	r4, [pc, #88]	; (80026c8 <xTaskResumeAll+0xe0>)
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	b963      	cbnz	r3, 800268c <xTaskResumeAll+0xa4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <xTaskResumeAll+0xdc>)
 8002674:	681c      	ldr	r4, [r3, #0]
 8002676:	2c01      	cmp	r4, #1
 8002678:	d1cb      	bne.n	8002612 <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <xTaskResumeAll+0xe4>)
 800267c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	f3bf 8f6f 	isb	sy
 800268a:	e00c      	b.n	80026a6 <xTaskResumeAll+0xbe>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 800268c:	4d0d      	ldr	r5, [pc, #52]	; (80026c4 <xTaskResumeAll+0xdc>)
 800268e:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ed      	beq.n	8002672 <xTaskResumeAll+0x8a>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8002696:	f7ff ff0f 	bl	80024b8 <xTaskIncrementTick>
 800269a:	b100      	cbz	r0, 800269e <xTaskResumeAll+0xb6>
						{
							xYieldPending = pdTRUE;
 800269c:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	6023      	str	r3, [r4, #0]
 80026a4:	e7f4      	b.n	8002690 <xTaskResumeAll+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80026a6:	f7ff fbb9 	bl	8001e1c <vPortExitCritical>

	return xAlreadyYielded;
}
 80026aa:	4620      	mov	r0, r4
 80026ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026b0:	20003d0c 	.word	0x20003d0c
 80026b4:	20003d60 	.word	0x20003d60
 80026b8:	20003d20 	.word	0x20003d20
 80026bc:	20003d64 	.word	0x20003d64
 80026c0:	20003d10 	.word	0x20003d10
 80026c4:	20003d68 	.word	0x20003d68
 80026c8:	20003c7c 	.word	0x20003c7c
 80026cc:	e000ed04 	.word	0xe000ed04
 80026d0:	20003c80 	.word	0x20003c80

080026d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80026d4:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80026d6:	b940      	cbnz	r0, 80026ea <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <vTaskDelay+0x68>)
 80026da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <vTaskDelay+0x6c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	b143      	cbz	r3, 8002702 <vTaskDelay+0x2e>
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	e7fe      	b.n	8002700 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002702:	f7ff fed1 	bl	80024a8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <vTaskDelay+0x70>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002708:	4d0f      	ldr	r5, [pc, #60]	; (8002748 <vTaskDelay+0x74>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800270e:	6828      	ldr	r0, [r5, #0]
 8002710:	3004      	adds	r0, #4
 8002712:	f7ff fafc 	bl	8001d0e <uxListRemove>
 8002716:	b940      	cbnz	r0, 800272a <vTaskDelay+0x56>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	490c      	ldr	r1, [pc, #48]	; (800274c <vTaskDelay+0x78>)
 800271c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800271e:	680a      	ldr	r2, [r1, #0]
 8002720:	2301      	movs	r3, #1
 8002722:	4083      	lsls	r3, r0
 8002724:	ea22 0303 	bic.w	r3, r2, r3
 8002728:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800272a:	4620      	mov	r0, r4
 800272c:	f7ff fd5c 	bl	80021e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002730:	f7ff ff5a 	bl	80025e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002734:	2800      	cmp	r0, #0
 8002736:	d0cf      	beq.n	80026d8 <vTaskDelay+0x4>
 8002738:	bd38      	pop	{r3, r4, r5, pc}
 800273a:	bf00      	nop
 800273c:	e000ed04 	.word	0xe000ed04
 8002740:	20003d0c 	.word	0x20003d0c
 8002744:	20003d18 	.word	0x20003d18
 8002748:	20003d10 	.word	0x20003d10
 800274c:	20003d64 	.word	0x20003d64

08002750 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002750:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8002752:	4d18      	ldr	r5, [pc, #96]	; (80027b4 <prvIdleTask+0x64>)
 8002754:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002756:	4f18      	ldr	r7, [pc, #96]	; (80027b8 <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	b1f3      	cbz	r3, 800279a <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 800275c:	f7ff fea4 	bl	80024a8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002760:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8002762:	f7ff ff41 	bl	80025e8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002766:	2c00      	cmp	r4, #0
 8002768:	d0f6      	beq.n	8002758 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800276a:	f7ff fb35 	bl	8001dd8 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <prvIdleTask+0x68>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002774:	1d20      	adds	r0, r4, #4
 8002776:	f7ff faca 	bl	8001d0e <uxListRemove>
					--uxCurrentNumberOfTasks;
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <prvIdleTask+0x6c>)
 800277c:	6813      	ldr	r3, [r2, #0]
 800277e:	3b01      	subs	r3, #1
 8002780:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8002782:	6833      	ldr	r3, [r6, #0]
 8002784:	3b01      	subs	r3, #1
 8002786:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8002788:	f7ff fb48 	bl	8001e1c <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 800278c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800278e:	f7ff fce1 	bl	8002154 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff fcde 	bl	8002154 <vPortFree>
 8002798:	e7de      	b.n	8002758 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <prvIdleTask+0x70>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d9d9      	bls.n	8002756 <prvIdleTask+0x6>
			{
				taskYIELD();
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <prvIdleTask+0x74>)
 80027a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	e7d0      	b.n	8002756 <prvIdleTask+0x6>
 80027b4:	20003c50 	.word	0x20003c50
 80027b8:	20003c54 	.word	0x20003c54
 80027bc:	20003d60 	.word	0x20003d60
 80027c0:	20003c80 	.word	0x20003c80
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027c8:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <vTaskSwitchContext+0x78>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <vTaskSwitchContext+0x7c>)
 80027d0:	b112      	cbz	r2, 80027d8 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 80027d8:	4c1b      	ldr	r4, [pc, #108]	; (8002848 <vTaskSwitchContext+0x80>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 80027da:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 80027dc:	6822      	ldr	r2, [r4, #0]
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d804      	bhi.n	80027f2 <vTaskSwitchContext+0x2a>
 80027e8:	6820      	ldr	r0, [r4, #0]
 80027ea:	6821      	ldr	r1, [r4, #0]
 80027ec:	3134      	adds	r1, #52	; 0x34
 80027ee:	f000 f841 	bl	8002874 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <vTaskSwitchContext+0x84>)
 80027f4:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f1c3 031f 	rsb	r3, r3, #31
 8002800:	2214      	movs	r2, #20
 8002802:	4913      	ldr	r1, [pc, #76]	; (8002850 <vTaskSwitchContext+0x88>)
 8002804:	435a      	muls	r2, r3
 8002806:	1888      	adds	r0, r1, r2
 8002808:	588d      	ldr	r5, [r1, r2]
 800280a:	b945      	cbnz	r5, 800281e <vTaskSwitchContext+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	e7fe      	b.n	800281c <vTaskSwitchContext+0x54>
 800281e:	6845      	ldr	r5, [r0, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	686d      	ldr	r5, [r5, #4]
 8002824:	6045      	str	r5, [r0, #4]
 8002826:	440a      	add	r2, r1
 8002828:	4295      	cmp	r5, r2
 800282a:	bf04      	itt	eq
 800282c:	686a      	ldreq	r2, [r5, #4]
 800282e:	6042      	streq	r2, [r0, #4]
 8002830:	2214      	movs	r2, #20
 8002832:	fb02 1303 	mla	r3, r2, r3, r1
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	6023      	str	r3, [r4, #0]
 800283c:	bd38      	pop	{r3, r4, r5, pc}
 800283e:	bf00      	nop
 8002840:	20003d0c 	.word	0x20003d0c
 8002844:	20003d68 	.word	0x20003d68
 8002848:	20003d10 	.word	0x20003d10
 800284c:	20003d64 	.word	0x20003d64
 8002850:	20003c80 	.word	0x20003c80

08002854 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <xTaskGetSchedulerState+0x18>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b133      	cbz	r3, 8002868 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <xTaskGetSchedulerState+0x1c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002860:	bf0c      	ite	eq
 8002862:	2002      	moveq	r0, #2
 8002864:	2000      	movne	r0, #0
 8002866:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002868:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 800286a:	4770      	bx	lr
 800286c:	20003c4c 	.word	0x20003c4c
 8002870:	20003d0c 	.word	0x20003d0c

08002874 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002874:	4770      	bx	lr

08002876 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8002876:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002878:	2001      	movs	r0, #1
 800287a:	f7ff fa04 	bl	8001c86 <osDelay>
 800287e:	e7fb      	b.n	8002878 <StartDefaultTask+0x2>

08002880 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002880:	b570      	push	{r4, r5, r6, lr}
 8002882:	b098      	sub	sp, #96	; 0x60
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002884:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <SystemClock_Config+0xb8>)
 8002886:	2100      	movs	r1, #0
 8002888:	9101      	str	r1, [sp, #4]
 800288a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800289c:	4b27      	ldr	r3, [pc, #156]	; (800293c <SystemClock_Config+0xbc>)
 800289e:	9102      	str	r1, [sp, #8]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80028b2:	2309      	movs	r3, #9
 80028b4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028b6:	2301      	movs	r3, #1
 80028b8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028ba:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028c0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028c2:	2308      	movs	r3, #8
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028c6:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 224;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028c8:	2604      	movs	r6, #4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 224;
 80028ca:	23e0      	movs	r3, #224	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028cc:	a80c      	add	r0, sp, #48	; 0x30
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ce:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 224;
 80028d0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028d2:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028d4:	9617      	str	r6, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d6:	f7fe f9c3 	bl	8000c60 <HAL_RCC_OscConfig>
 80028da:	b100      	cbz	r0, 80028de <SystemClock_Config+0x5e>
 80028dc:	e7fe      	b.n	80028dc <SystemClock_Config+0x5c>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028e2:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028e4:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028e6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028e8:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028ee:	a807      	add	r0, sp, #28
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028f0:	9507      	str	r5, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f2:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028f4:	930b      	str	r3, [sp, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028f6:	f7fe fb59 	bl	8000fac <HAL_RCC_ClockConfig>
 80028fa:	b100      	cbz	r0, 80028fe <SystemClock_Config+0x7e>
 80028fc:	e7fe      	b.n	80028fc <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028fe:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002902:	a803      	add	r0, sp, #12
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002904:	9403      	str	r4, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002906:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002908:	f7fe fc58 	bl	80011bc <HAL_RCCEx_PeriphCLKConfig>
 800290c:	4604      	mov	r4, r0
 800290e:	b100      	cbz	r0, 8002912 <SystemClock_Config+0x92>
 8002910:	e7fe      	b.n	8002910 <SystemClock_Config+0x90>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002912:	f7fe fbff 	bl	8001114 <HAL_RCC_GetHCLKFreq>
 8002916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291a:	fbb0 f0f3 	udiv	r0, r0, r3
 800291e:	f7fe f845 	bl	80009ac <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002922:	4630      	mov	r0, r6
 8002924:	f7fe f858 	bl	80009d8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002928:	4622      	mov	r2, r4
 800292a:	4629      	mov	r1, r5
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f7fd fffc 	bl	800092c <HAL_NVIC_SetPriority>
}
 8002934:	b018      	add	sp, #96	; 0x60
 8002936:	bd70      	pop	{r4, r5, r6, pc}
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000

08002940 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	b08d      	sub	sp, #52	; 0x34
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002944:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002946:	f7fd fc8f 	bl	8000268 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800294a:	f7ff ff99 	bl	8002880 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800294e:	4b9f      	ldr	r3, [pc, #636]	; (8002bcc <main+0x28c>)
 8002950:	9401      	str	r4, [sp, #4]
 8002952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B2_GREEN_LED_Pin|MCU_RED_LED_Pin|B1_RED_LED_Pin|B2_RED_LED_Pin 
 8002954:	489e      	ldr	r0, [pc, #632]	; (8002bd0 <main+0x290>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : BUTTON_USER_Pin BUTTON_SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin|BUTTON_SHUTDOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002956:	4d9f      	ldr	r5, [pc, #636]	; (8002bd4 <main+0x294>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002958:	f042 0210 	orr.w	r2, r2, #16
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
 800295e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002960:	f002 0210 	and.w	r2, r2, #16
 8002964:	9201      	str	r2, [sp, #4]
 8002966:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002968:	9402      	str	r4, [sp, #8]
 800296a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800296c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
 8002972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002974:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002978:	9202      	str	r2, [sp, #8]
 800297a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800297c:	9403      	str	r4, [sp, #12]
 800297e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002980:	f042 0204 	orr.w	r2, r2, #4
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
 8002986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002988:	f002 0204 	and.w	r2, r2, #4
 800298c:	9203      	str	r2, [sp, #12]
 800298e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002990:	9404      	str	r4, [sp, #16]
 8002992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002994:	f042 0201 	orr.w	r2, r2, #1
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
 800299a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800299c:	f002 0201 	and.w	r2, r2, #1
 80029a0:	9204      	str	r2, [sp, #16]
 80029a2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a4:	9405      	str	r4, [sp, #20]
 80029a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a8:	f042 0202 	orr.w	r2, r2, #2
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
 80029ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b0:	f002 0202 	and.w	r2, r2, #2
 80029b4:	9205      	str	r2, [sp, #20]
 80029b6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b8:	9406      	str	r4, [sp, #24]
 80029ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029bc:	f042 0208 	orr.w	r2, r2, #8
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B2_GREEN_LED_Pin|MCU_RED_LED_Pin|B1_RED_LED_Pin|B2_RED_LED_Pin 
 80029ca:	4622      	mov	r2, r4
 80029cc:	f640 713f 	movw	r1, #3903	; 0xf3f
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029d0:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B2_GREEN_LED_Pin|MCU_RED_LED_Pin|B1_RED_LED_Pin|B2_RED_LED_Pin 
 80029d2:	f7fe f933 	bl	8000c3c <HAL_GPIO_WritePin>
                          |B1_CHARGE_Pin|B2_CHARGE_Pin|B1_DISCHARGE_Pin|B2_DISCHARGE_Pin 
                          |MCU_GREEN_LED_Pin|B1_GREEN_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, B1_SPI_CS_Pin|B2_SPI_CS_Pin, GPIO_PIN_SET);
 80029d6:	2201      	movs	r2, #1
 80029d8:	2130      	movs	r1, #48	; 0x30
 80029da:	487f      	ldr	r0, [pc, #508]	; (8002bd8 <main+0x298>)
 80029dc:	f7fe f92e 	bl	8000c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, B2_CELL_PD_Pin|B1_CELL_PD_Pin|B1_CURR_FAULT_EN_Pin|B2_CURR_FAULT_EN_Pin, GPIO_PIN_RESET);
 80029e0:	4622      	mov	r2, r4
 80029e2:	f240 3103 	movw	r1, #771	; 0x303
 80029e6:	487d      	ldr	r0, [pc, #500]	; (8002bdc <main+0x29c>)
 80029e8:	f7fe f928 	bl	8000c3c <HAL_GPIO_WritePin>
                           B1_CHARGE_Pin B2_CHARGE_Pin B1_DISCHARGE_Pin B2_DISCHARGE_Pin 
                           MCU_GREEN_LED_Pin B1_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = B2_GREEN_LED_Pin|MCU_RED_LED_Pin|B1_RED_LED_Pin|B2_RED_LED_Pin 
                          |B1_CHARGE_Pin|B2_CHARGE_Pin|B1_DISCHARGE_Pin|B2_DISCHARGE_Pin 
                          |MCU_GREEN_LED_Pin|B1_GREEN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ec:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOD, B2_CELL_PD_Pin|B1_CELL_PD_Pin|B1_CURR_FAULT_EN_Pin|B2_CURR_FAULT_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B2_GREEN_LED_Pin MCU_RED_LED_Pin B1_RED_LED_Pin B2_RED_LED_Pin 
                           B1_CHARGE_Pin B2_CHARGE_Pin B1_DISCHARGE_Pin B2_DISCHARGE_Pin 
                           MCU_GREEN_LED_Pin B1_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = B2_GREEN_LED_Pin|MCU_RED_LED_Pin|B1_RED_LED_Pin|B2_RED_LED_Pin 
 80029ee:	f640 733f 	movw	r3, #3903	; 0xf3f
                          |B1_CHARGE_Pin|B2_CHARGE_Pin|B1_DISCHARGE_Pin|B2_DISCHARGE_Pin 
                          |MCU_GREEN_LED_Pin|B1_GREEN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f2:	a907      	add	r1, sp, #28
 80029f4:	4876      	ldr	r0, [pc, #472]	; (8002bd0 <main+0x290>)
  HAL_GPIO_WritePin(GPIOD, B2_CELL_PD_Pin|B1_CELL_PD_Pin|B1_CURR_FAULT_EN_Pin|B2_CURR_FAULT_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B2_GREEN_LED_Pin MCU_RED_LED_Pin B1_RED_LED_Pin B2_RED_LED_Pin 
                           B1_CHARGE_Pin B2_CHARGE_Pin B1_DISCHARGE_Pin B2_DISCHARGE_Pin 
                           MCU_GREEN_LED_Pin B1_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = B2_GREEN_LED_Pin|MCU_RED_LED_Pin|B1_RED_LED_Pin|B2_RED_LED_Pin 
 80029f6:	9307      	str	r3, [sp, #28]
                          |B1_CHARGE_Pin|B2_CHARGE_Pin|B1_DISCHARGE_Pin|B2_DISCHARGE_Pin 
                          |MCU_GREEN_LED_Pin|B1_GREEN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029fe:	f7fe f83d 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGER_DETECT_Pin */
  GPIO_InitStruct.Pin = CHARGER_DETECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a02:	4b77      	ldr	r3, [pc, #476]	; (8002be0 <main+0x2a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CHARGER_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002a04:	4877      	ldr	r0, [pc, #476]	; (8002be4 <main+0x2a4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : CHARGER_DETECT_Pin */
  GPIO_InitStruct.Pin = CHARGER_DETECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a06:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CHARGER_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002a08:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : CHARGER_DETECT_Pin */
  GPIO_InitStruct.Pin = CHARGER_DETECT_Pin;
 8002a0a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(CHARGER_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002a0e:	f7fe f835 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_SPI_CS_Pin B2_SPI_CS_Pin */
  GPIO_InitStruct.Pin = B1_SPI_CS_Pin|B2_SPI_CS_Pin;
 8002a12:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a14:	a907      	add	r1, sp, #28
 8002a16:	4870      	ldr	r0, [pc, #448]	; (8002bd8 <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CHARGER_DETECT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : B1_SPI_CS_Pin B2_SPI_CS_Pin */
  GPIO_InitStruct.Pin = B1_SPI_CS_Pin|B2_SPI_CS_Pin;
 8002a18:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : BUTTON_USER_Pin BUTTON_SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin|BUTTON_SHUTDOWN_Pin;
 8002a1a:	f44f 5740 	mov.w	r7, #12288	; 0x3000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CHARGER_DETECT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : B1_SPI_CS_Pin B2_SPI_CS_Pin */
  GPIO_InitStruct.Pin = B1_SPI_CS_Pin|B2_SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a24:	f7fe f82a 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_USER_Pin BUTTON_SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin|BUTTON_SHUTDOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a28:	a907      	add	r1, sp, #28
 8002a2a:	4869      	ldr	r0, [pc, #420]	; (8002bd0 <main+0x290>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : BUTTON_USER_Pin BUTTON_SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin|BUTTON_SHUTDOWN_Pin;
 8002a2c:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a2e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a32:	f7fe f823 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_CELL_PD_Pin B1_CELL_PD_Pin B1_CURR_FAULT_EN_Pin B2_CURR_FAULT_EN_Pin */
  GPIO_InitStruct.Pin = B2_CELL_PD_Pin|B1_CELL_PD_Pin|B1_CURR_FAULT_EN_Pin|B2_CURR_FAULT_EN_Pin;
 8002a36:	f240 3303 	movw	r3, #771	; 0x303
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a3a:	a907      	add	r1, sp, #28
 8002a3c:	4867      	ldr	r0, [pc, #412]	; (8002bdc <main+0x29c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : B2_CELL_PD_Pin B1_CELL_PD_Pin B1_CURR_FAULT_EN_Pin B2_CURR_FAULT_EN_Pin */
  GPIO_InitStruct.Pin = B2_CELL_PD_Pin|B1_CELL_PD_Pin|B1_CURR_FAULT_EN_Pin|B2_CURR_FAULT_EN_Pin;
 8002a3e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a40:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a44:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a46:	f7fe f819 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4a:	a907      	add	r1, sp, #28
 8002a4c:	4863      	ldr	r0, [pc, #396]	; (8002bdc <main+0x29c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002a4e:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a50:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a54:	f7fe f812 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_CURR_FAULT_Pin B2_CURR_FAULT_Pin */
  GPIO_InitStruct.Pin = B1_CURR_FAULT_Pin|B2_CURR_FAULT_Pin;
 8002a58:	2318      	movs	r3, #24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a5a:	a907      	add	r1, sp, #28
 8002a5c:	485f      	ldr	r0, [pc, #380]	; (8002bdc <main+0x29c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : B1_CURR_FAULT_Pin B2_CURR_FAULT_Pin */
  GPIO_InitStruct.Pin = B1_CURR_FAULT_Pin|B2_CURR_FAULT_Pin;
 8002a5e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a60:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a64:	f7fe f80a 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_CELL_ALERT_Pin B1_CELL_ALERT_Pin */
  GPIO_InitStruct.Pin = B2_CELL_ALERT_Pin|B1_CELL_ALERT_Pin;
 8002a68:	2360      	movs	r3, #96	; 0x60
 8002a6a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a6c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : B2_CELL_ALERT_Pin B1_CELL_ALERT_Pin */
  GPIO_InitStruct.Pin = B2_CELL_ALERT_Pin|B1_CELL_ALERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a6e:	4b5e      	ldr	r3, [pc, #376]	; (8002be8 <main+0x2a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a70:	485a      	ldr	r0, [pc, #360]	; (8002bdc <main+0x29c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : B2_CELL_ALERT_Pin B1_CELL_ALERT_Pin */
  GPIO_InitStruct.Pin = B2_CELL_ALERT_Pin|B1_CELL_ALERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a72:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a76:	f7fe f801 	bl	8000a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	2105      	movs	r1, #5
 8002a7e:	2006      	movs	r0, #6
 8002a80:	f7fd ff54 	bl	800092c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a84:	2006      	movs	r0, #6
 8002a86:	f7fd ff85 	bl	8000994 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	2105      	movs	r1, #5
 8002a8e:	2009      	movs	r0, #9
 8002a90:	f7fd ff4c 	bl	800092c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a94:	2009      	movs	r0, #9
 8002a96:	f7fd ff7d 	bl	8000994 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002a9a:	4622      	mov	r2, r4
 8002a9c:	2105      	movs	r1, #5
 8002a9e:	200a      	movs	r0, #10
 8002aa0:	f7fd ff44 	bl	800092c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002aa4:	200a      	movs	r0, #10
 8002aa6:	f7fd ff75 	bl	8000994 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002aaa:	4622      	mov	r2, r4
 8002aac:	2105      	movs	r1, #5
 8002aae:	2028      	movs	r0, #40	; 0x28

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8002ab0:	4d4e      	ldr	r5, [pc, #312]	; (8002bec <main+0x2ac>)
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ab2:	f7fd ff3b 	bl	800092c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ab6:	2028      	movs	r0, #40	; 0x28
 8002ab8:	f7fd ff6c 	bl	8000994 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002abc:	4b4c      	ldr	r3, [pc, #304]	; (8002bf0 <main+0x2b0>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002abe:	60ac      	str	r4, [r5, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ac0:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ac4:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ac6:	e885 0088 	stmia.w	r5, {r3, r7}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
 8002aca:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002acc:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ace:	622c      	str	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ad0:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ad2:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ad4:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ad6:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ad8:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ada:	f7fd fbed 	bl	80002b8 <HAL_ADC_Init>
 8002ade:	b100      	cbz	r0, 8002ae2 <main+0x1a2>
 8002ae0:	e7fe      	b.n	8002ae0 <main+0x1a0>
    Error_Handler();
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ae2:	2302      	movs	r3, #2
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ae4:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ae6:	a907      	add	r1, sp, #28
 8002ae8:	4628      	mov	r0, r5
    Error_Handler();
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8002aea:	9307      	str	r3, [sp, #28]
  sConfig.Rank = 1;
 8002aec:	9608      	str	r6, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002aee:	f7fd fc8d 	bl	800040c <HAL_ADC_ConfigChannel>
 8002af2:	b100      	cbz	r0, 8002af6 <main+0x1b6>
 8002af4:	e7fe      	b.n	8002af4 <main+0x1b4>

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
 8002af6:	4c3f      	ldr	r4, [pc, #252]	; (8002bf4 <main+0x2b4>)
 8002af8:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <main+0x2b8>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002afa:	60a0      	str	r0, [r4, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002afc:	6120      	str	r0, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002afe:	61a0      	str	r0, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002b00:	6220      	str	r0, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b02:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b04:	60e0      	str	r0, [r4, #12]
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002b06:	6320      	str	r0, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002b08:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b0a:	e884 0088 	stmia.w	r4, {r3, r7}
  hadc3.Init.ScanConvMode = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 8002b0e:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b10:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002b12:	f7fd fbd1 	bl	80002b8 <HAL_ADC_Init>
 8002b16:	b100      	cbz	r0, 8002b1a <main+0x1da>
 8002b18:	e7fe      	b.n	8002b18 <main+0x1d8>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b1a:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b1c:	a907      	add	r1, sp, #28
 8002b1e:	4620      	mov	r0, r4
    Error_Handler();
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b20:	9607      	str	r6, [sp, #28]
  sConfig.Rank = 1;
 8002b22:	9608      	str	r6, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b24:	f7fd fc72 	bl	800040c <HAL_ADC_ConfigChannel>
 8002b28:	b100      	cbz	r0, 8002b2c <main+0x1ec>
 8002b2a:	e7fe      	b.n	8002b2a <main+0x1ea>

/* CAN1 init function */
static void MX_CAN1_Init(void)
{

  hcan1.Instance = CAN1;
 8002b2c:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <main+0x2bc>)
  hcan1.Init.Prescaler = 16;
 8002b2e:	4a34      	ldr	r2, [pc, #208]	; (8002c00 <main+0x2c0>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002b30:	6098      	str	r0, [r3, #8]
/* CAN1 init function */
static void MX_CAN1_Init(void)
{

  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 16;
 8002b32:	2610      	movs	r6, #16
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SJW = CAN_SJW_1TQ;
 8002b34:	60d8      	str	r0, [r3, #12]
  hcan1.Init.BS1 = CAN_BS1_1TQ;
 8002b36:	6118      	str	r0, [r3, #16]
  hcan1.Init.BS2 = CAN_BS2_1TQ;
 8002b38:	6158      	str	r0, [r3, #20]
  hcan1.Init.TTCM = DISABLE;
 8002b3a:	6198      	str	r0, [r3, #24]
  hcan1.Init.ABOM = DISABLE;
 8002b3c:	61d8      	str	r0, [r3, #28]
  hcan1.Init.AWUM = DISABLE;
 8002b3e:	6218      	str	r0, [r3, #32]
  hcan1.Init.NART = DISABLE;
 8002b40:	6258      	str	r0, [r3, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 8002b42:	6298      	str	r0, [r3, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 8002b44:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002b46:	4618      	mov	r0, r3
/* CAN1 init function */
static void MX_CAN1_Init(void)
{

  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 16;
 8002b48:	e883 0044 	stmia.w	r3, {r2, r6}
  hcan1.Init.ABOM = DISABLE;
  hcan1.Init.AWUM = DISABLE;
  hcan1.Init.NART = DISABLE;
  hcan1.Init.RFLM = DISABLE;
  hcan1.Init.TXFP = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002b4c:	f7fd fcf4 	bl	8000538 <HAL_CAN_Init>
 8002b50:	b100      	cbz	r0, 8002b54 <main+0x214>
 8002b52:	e7fe      	b.n	8002b52 <main+0x212>

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 8002b54:	4c2b      	ldr	r4, [pc, #172]	; (8002c04 <main+0x2c4>)
 8002b56:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <main+0x2c8>)
 8002b58:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f7fd ff48 	bl	80009f0 <HAL_DAC_Init>
 8002b60:	4602      	mov	r2, r0
 8002b62:	b100      	cbz	r0, 8002b66 <main+0x226>
 8002b64:	e7fe      	b.n	8002b64 <main+0x224>
    Error_Handler();
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002b66:	9007      	str	r0, [sp, #28]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002b68:	9008      	str	r0, [sp, #32]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002b6a:	a907      	add	r1, sp, #28
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7fd ff52 	bl	8000a16 <HAL_DAC_ConfigChannel>
 8002b72:	b100      	cbz	r0, 8002b76 <main+0x236>
 8002b74:	e7fe      	b.n	8002b74 <main+0x234>

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8002b76:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <main+0x2cc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b78:	4a25      	ldr	r2, [pc, #148]	; (8002c10 <main+0x2d0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b7a:	6098      	str	r0, [r3, #8]
/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b7c:	f44f 7582 	mov.w	r5, #260	; 0x104
 8002b80:	e883 0024 	stmia.w	r3, {r2, r5}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b84:	f44f 7200 	mov.w	r2, #512	; 0x200
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b88:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b8a:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b8c:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b90:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b92:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b94:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b96:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b98:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b9a:	4618      	mov	r0, r3
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8002b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b9e:	f7fe fc11 	bl	80013c4 <HAL_SPI_Init>
 8002ba2:	b100      	cbz	r0, 8002ba6 <main+0x266>
 8002ba4:	e7fe      	b.n	8002ba4 <main+0x264>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <main+0x2d4>)
  huart1.Init.BaudRate = 115200;
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <main+0x2d8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002baa:	6098      	str	r0, [r3, #8]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8002bac:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bb0:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bb2:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bb4:	240c      	movs	r4, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb6:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb8:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bba:	4618      	mov	r0, r3
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8002bbc:	e883 0024 	stmia.w	r3, {r2, r5}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bc0:	615c      	str	r4, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bc2:	f7fe ff15 	bl	80019f0 <HAL_UART_Init>
 8002bc6:	b348      	cbz	r0, 8002c1c <main+0x2dc>
 8002bc8:	e7fe      	b.n	8002bc8 <main+0x288>
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	10210000 	.word	0x10210000
 8002bd8:	40020800 	.word	0x40020800
 8002bdc:	40020c00 	.word	0x40020c00
 8002be0:	10310000 	.word	0x10310000
 8002be4:	40020000 	.word	0x40020000
 8002be8:	10120000 	.word	0x10120000
 8002bec:	20003db4 	.word	0x20003db4
 8002bf0:	40012000 	.word	0x40012000
 8002bf4:	20003dfc 	.word	0x20003dfc
 8002bf8:	40012200 	.word	0x40012200
 8002bfc:	20003f24 	.word	0x20003f24
 8002c00:	40006400 	.word	0x40006400
 8002c04:	20003e84 	.word	0x20003e84
 8002c08:	40007400 	.word	0x40007400
 8002c0c:	20003ecc 	.word	0x20003ecc
 8002c10:	40013000 	.word	0x40013000
 8002c14:	20003e44 	.word	0x20003e44
 8002c18:	40011000 	.word	0x40011000

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <main+0x354>)
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <main+0x358>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c20:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c22:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c24:	6118      	str	r0, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c26:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c28:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c2a:	4618      	mov	r0, r3
/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8002c2c:	e883 0024 	stmia.w	r3, {r2, r5}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c30:	615c      	str	r4, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c32:	f7fe fedd 	bl	80019f0 <HAL_UART_Init>
 8002c36:	b100      	cbz	r0, 8002c3a <main+0x2fa>
 8002c38:	e7fe      	b.n	8002c38 <main+0x2f8>

/* WWDG init function */
static void MX_WWDG_Init(void)
{

  hwwdg.Instance = WWDG;
 8002c3a:	4818      	ldr	r0, [pc, #96]	; (8002c9c <main+0x35c>)
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <main+0x360>)
 8002c3e:	6003      	str	r3, [r0, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
  hwwdg.Init.Window = 64;
 8002c40:	2240      	movs	r2, #64	; 0x40
/* WWDG init function */
static void MX_WWDG_Init(void)
{

  hwwdg.Instance = WWDG;
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 8002c42:	2300      	movs	r3, #0
 8002c44:	6043      	str	r3, [r0, #4]
  hwwdg.Init.Window = 64;
 8002c46:	6082      	str	r2, [r0, #8]
  hwwdg.Init.Counter = 64;
 8002c48:	60c2      	str	r2, [r0, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8002c4a:	6103      	str	r3, [r0, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8002c4c:	f7fe ffe6 	bl	8001c1c <HAL_WWDG_Init>
 8002c50:	b100      	cbz	r0, 8002c54 <main+0x314>
 8002c52:	e7fe      	b.n	8002c52 <main+0x312>
static void MX_RTC_Init(void)
{

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <main+0x364>)
 8002c56:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <main+0x368>)
 8002c58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8002c5a:	227f      	movs	r2, #127	; 0x7f
{

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c5c:	6058      	str	r0, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c5e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c60:	6118      	str	r0, [r3, #16]
    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8002c62:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c64:	6158      	str	r0, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c66:	6198      	str	r0, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c68:	4618      	mov	r0, r3
    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8002c6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c6c:	f7fe fb66 	bl	800133c <HAL_RTC_Init>
 8002c70:	4606      	mov	r6, r0
 8002c72:	b100      	cbz	r0, 8002c76 <main+0x336>
 8002c74:	e7fe      	b.n	8002c74 <main+0x334>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002c76:	4d0d      	ldr	r5, [pc, #52]	; (8002cac <main+0x36c>)
 8002c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c7a:	ac07      	add	r4, sp, #28
 8002c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c7e:	682b      	ldr	r3, [r5, #0]
 8002c80:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002c82:	4631      	mov	r1, r6
 8002c84:	a807      	add	r0, sp, #28
 8002c86:	f7fe ffe2 	bl	8001c4e <osThreadCreate>
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <main+0x370>)
 8002c8c:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8002c8e:	f7fe ffd9 	bl	8001c44 <osKernelStart>
 8002c92:	e7fe      	b.n	8002c92 <main+0x352>
 8002c94:	20003d74 	.word	0x20003d74
 8002c98:	40004800 	.word	0x40004800
 8002c9c:	20003eb8 	.word	0x20003eb8
 8002ca0:	40002c00 	.word	0x40002c00
 8002ca4:	20003e98 	.word	0x20003e98
 8002ca8:	40002800 	.word	0x40002800
 8002cac:	08003108 	.word	0x08003108
 8002cb0:	20003d70 	.word	0x20003d70

08002cb4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002cb4:	6802      	ldr	r2, [r0, #0]
 8002cb6:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002cbc:	f7fd baee 	b.w	800029c <HAL_IncTick>
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40010000 	.word	0x40010000

08002cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cca:	2003      	movs	r0, #3
 8002ccc:	f7fd fe1c 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	f06f 000b 	mvn.w	r0, #11
 8002cd8:	f7fd fe28 	bl	800092c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4611      	mov	r1, r2
 8002ce0:	f06f 000a 	mvn.w	r0, #10
 8002ce4:	f7fd fe22 	bl	800092c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4611      	mov	r1, r2
 8002cec:	f06f 0009 	mvn.w	r0, #9
 8002cf0:	f7fd fe1c 	bl	800092c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	f06f 0004 	mvn.w	r0, #4
 8002cfc:	f7fd fe16 	bl	800092c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002d00:	2200      	movs	r2, #0
 8002d02:	4611      	mov	r1, r2
 8002d04:	f06f 0003 	mvn.w	r0, #3
 8002d08:	f7fd fe10 	bl	800092c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	210f      	movs	r1, #15
 8002d10:	f06f 0001 	mvn.w	r0, #1
 8002d14:	f7fd fe0a 	bl	800092c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	210f      	movs	r1, #15
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002d24:	f7fd be02 	b.w	800092c <HAL_NVIC_SetPriority>

08002d28 <HAL_ADC_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d28:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002d2a:	6803      	ldr	r3, [r0, #0]
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_ADC_MspInit+0x74>)
 8002d2e:	4293      	cmp	r3, r2

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d30:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002d32:	d111      	bne.n	8002d58 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d34:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <HAL_ADC_MspInit+0x78>)
 8002d36:	2100      	movs	r1, #0
 8002d38:	9101      	str	r1, [sp, #4]
 8002d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = B2_CURR_SENS_Pin|B1_CURR_SENS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	9105      	str	r1, [sp, #20]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = B2_CURR_SENS_Pin|B1_CURR_SENS_Pin;
 8002d4e:	230c      	movs	r3, #12
 8002d50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d52:	2303      	movs	r3, #3
 8002d54:	9304      	str	r3, [sp, #16]
 8002d56:	e01b      	b.n	8002d90 <HAL_ADC_MspInit+0x68>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8002d58:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <HAL_ADC_MspInit+0x7c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d11c      	bne.n	8002d98 <HAL_ADC_MspInit+0x70>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d5e:	2400      	movs	r4, #0
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <HAL_ADC_MspInit+0x78>)
 8002d62:	9402      	str	r4, [sp, #8]
 8002d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = B2_CURR_VZCR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(B2_CURR_VZCR_GPIO_Port, &GPIO_InitStruct);
 8002d66:	4810      	ldr	r0, [pc, #64]	; (8002da8 <HAL_ADC_MspInit+0x80>)
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PC0     ------> ADC3_IN10
    PA1     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = B2_CURR_VZCR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	9405      	str	r4, [sp, #20]
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d76:	9302      	str	r3, [sp, #8]
 8002d78:	9b02      	ldr	r3, [sp, #8]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_IN10
    PA1     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = B2_CURR_VZCR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d7a:	2503      	movs	r5, #3
  
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_IN10
    PA1     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = B2_CURR_VZCR_Pin;
 8002d7c:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(B2_CURR_VZCR_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	a903      	add	r1, sp, #12
  
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_IN10
    PA1     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = B2_CURR_VZCR_Pin;
 8002d80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d82:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(B2_CURR_VZCR_GPIO_Port, &GPIO_InitStruct);
 8002d84:	f7fd fe7a 	bl	8000a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B1_CURR_VZCR_Pin;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(B1_CURR_VZCR_GPIO_Port, &GPIO_InitStruct);
 8002d90:	a903      	add	r1, sp, #12
 8002d92:	4806      	ldr	r0, [pc, #24]	; (8002dac <HAL_ADC_MspInit+0x84>)
 8002d94:	f7fd fe72 	bl	8000a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d98:	b009      	add	sp, #36	; 0x24
 8002d9a:	bd30      	pop	{r4, r5, pc}
 8002d9c:	40012000 	.word	0x40012000
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40012200 	.word	0x40012200
 8002da8:	40020800 	.word	0x40020800
 8002dac:	40020000 	.word	0x40020000

08002db0 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002db0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8002db2:	6802      	ldr	r2, [r0, #0]
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <HAL_CAN_MspInit+0x58>)
 8002db6:	429a      	cmp	r2, r3
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002db8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8002dba:	d122      	bne.n	8002e02 <HAL_CAN_MspInit+0x52>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002dbc:	2400      	movs	r4, #0
 8002dbe:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8002dc2:	9400      	str	r4, [sp, #0]
 8002dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc6:	4811      	ldr	r0, [pc, #68]	; (8002e0c <HAL_CAN_MspInit+0x5c>)
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002dc8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	9403      	str	r4, [sp, #12]
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	9b00      	ldr	r3, [sp, #0]
  
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002dda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dde:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de4:	2303      	movs	r3, #3
 8002de6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002dea:	2309      	movs	r3, #9
 8002dec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dee:	f7fd fe45 	bl	8000a7c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002df2:	2014      	movs	r0, #20
 8002df4:	4622      	mov	r2, r4
 8002df6:	2105      	movs	r1, #5
 8002df8:	f7fd fd98 	bl	800092c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002dfc:	2014      	movs	r0, #20
 8002dfe:	f7fd fdc9 	bl	8000994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002e02:	b006      	add	sp, #24
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	bf00      	nop
 8002e08:	40006400 	.word	0x40006400
 8002e0c:	40020000 	.word	0x40020000

08002e10 <HAL_DAC_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002e10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 8002e12:	6802      	ldr	r2, [r0, #0]
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <HAL_DAC_MspInit+0x3c>)
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d115      	bne.n	8002e46 <HAL_DAC_MspInit+0x36>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002e20:	9100      	str	r1, [sp, #0]
 8002e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = CURR_VOC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CURR_VOC_GPIO_Port, &GPIO_InitStruct);
 8002e24:	480a      	ldr	r0, [pc, #40]	; (8002e50 <HAL_DAC_MspInit+0x40>)
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e26:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = CURR_VOC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	9103      	str	r1, [sp, #12]
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	9b00      	ldr	r3, [sp, #0]
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = CURR_VOC_Pin;
 8002e38:	2310      	movs	r3, #16
 8002e3a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CURR_VOC_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	a901      	add	r1, sp, #4
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = CURR_VOC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CURR_VOC_GPIO_Port, &GPIO_InitStruct);
 8002e42:	f7fd fe1b 	bl	8000a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002e46:	b007      	add	sp, #28
 8002e48:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e4c:	40007400 	.word	0x40007400
 8002e50:	40020000 	.word	0x40020000

08002e54 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8002e54:	6802      	ldr	r2, [r0, #0]
 8002e56:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_RTC_MspInit+0x10>)
 8002e58:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e5a:	bf02      	ittt	eq
 8002e5c:	4b02      	ldreq	r3, [pc, #8]	; (8002e68 <HAL_RTC_MspInit+0x14>)
 8002e5e:	2201      	moveq	r2, #1
 8002e60:	601a      	streq	r2, [r3, #0]
 8002e62:	4770      	bx	lr
 8002e64:	40002800 	.word	0x40002800
 8002e68:	42470e3c 	.word	0x42470e3c

08002e6c <HAL_SPI_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e6c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002e6e:	6802      	ldr	r2, [r0, #0]
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_SPI_MspInit+0x54>)
 8002e72:	429a      	cmp	r2, r3
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e74:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002e76:	d121      	bne.n	8002ebc <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e78:	2400      	movs	r4, #0
 8002e7a:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002e7e:	9400      	str	r4, [sp, #0]
 8002e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e82:	4810      	ldr	r0, [pc, #64]	; (8002ec4 <HAL_SPI_MspInit+0x58>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	9403      	str	r4, [sp, #12]
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e96:	23e0      	movs	r3, #224	; 0xe0
 8002e98:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e9e:	2505      	movs	r5, #5
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea0:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea2:	a901      	add	r1, sp, #4
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ea6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea8:	f7fd fde8 	bl	8000a7c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002eac:	2023      	movs	r0, #35	; 0x23
 8002eae:	4622      	mov	r2, r4
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f7fd fd3b 	bl	800092c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002eb6:	2023      	movs	r0, #35	; 0x23
 8002eb8:	f7fd fd6c 	bl	8000994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ebc:	b007      	add	sp, #28
 8002ebe:	bd30      	pop	{r4, r5, pc}
 8002ec0:	40013000 	.word	0x40013000
 8002ec4:	40020000 	.word	0x40020000

08002ec8 <HAL_UART_MspInit>:
  /* USER CODE END SPI1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002eca:	6803      	ldr	r3, [r0, #0]
 8002ecc:	4a26      	ldr	r2, [pc, #152]	; (8002f68 <HAL_UART_MspInit+0xa0>)
 8002ece:	4293      	cmp	r3, r2
  /* USER CODE END SPI1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002ed2:	d121      	bne.n	8002f18 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ed4:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	4826      	ldr	r0, [pc, #152]	; (8002f70 <HAL_UART_MspInit+0xa8>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ed8:	2400      	movs	r4, #0
 8002eda:	9401      	str	r4, [sp, #4]
 8002edc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ede:	f041 0110 	orr.w	r1, r1, #16
 8002ee2:	6459      	str	r1, [r3, #68]	; 0x44
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002eee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ef2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efc:	2303      	movs	r3, #3
 8002efe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f00:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f02:	2307      	movs	r3, #7
 8002f04:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f06:	f7fd fdb9 	bl	8000a7c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f0a:	2025      	movs	r0, #37	; 0x25
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	2105      	movs	r1, #5
 8002f10:	f7fd fd0c 	bl	800092c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f14:	2025      	movs	r0, #37	; 0x25
 8002f16:	e023      	b.n	8002f60 <HAL_UART_MspInit+0x98>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8002f18:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <HAL_UART_MspInit+0xac>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d122      	bne.n	8002f64 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	4815      	ldr	r0, [pc, #84]	; (8002f78 <HAL_UART_MspInit+0xb0>)
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f22:	2400      	movs	r4, #0
 8002f24:	9402      	str	r4, [sp, #8]
 8002f26:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f28:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8002f2c:	6419      	str	r1, [r3, #64]	; 0x40
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f34:	9302      	str	r3, [sp, #8]
 8002f36:	9b02      	ldr	r3, [sp, #8]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f42:	2301      	movs	r3, #1
 8002f44:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f46:	2303      	movs	r3, #3
 8002f48:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4a:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f4c:	2307      	movs	r3, #7
 8002f4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f50:	f7fd fd94 	bl	8000a7c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002f54:	2027      	movs	r0, #39	; 0x27
 8002f56:	4622      	mov	r2, r4
 8002f58:	2105      	movs	r1, #5
 8002f5a:	f7fd fce7 	bl	800092c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f5e:	2027      	movs	r0, #39	; 0x27
 8002f60:	f7fd fd18 	bl	8000994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f64:	b008      	add	sp, #32
 8002f66:	bd10      	pop	{r4, pc}
 8002f68:	40011000 	.word	0x40011000
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40004800 	.word	0x40004800
 8002f78:	40020400 	.word	0x40020400

08002f7c <HAL_WWDG_MspInit>:
}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{

  if(hwwdg->Instance==WWDG)
 8002f7c:	6802      	ldr	r2, [r0, #0]
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_WWDG_MspInit+0x28>)
 8002f80:	429a      	cmp	r2, r3
  }

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8002f82:	b082      	sub	sp, #8

  if(hwwdg->Instance==WWDG)
 8002f84:	d10b      	bne.n	8002f9e <HAL_WWDG_MspInit+0x22>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <HAL_WWDG_MspInit+0x2c>)
 8002f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8002f9e:	b002      	add	sp, #8
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40002c00 	.word	0x40002c00
 8002fa8:	40023800 	.word	0x40023800

08002fac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fac:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002fae:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2019      	movs	r0, #25
 8002fb6:	f7fd fcb9 	bl	800092c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8002fba:	2019      	movs	r0, #25
 8002fbc:	f7fd fcea 	bl	8000994 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_InitTick+0x6c>)
 8002fc4:	9502      	str	r5, [sp, #8]
 8002fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002fc8:	4c14      	ldr	r4, [pc, #80]	; (800301c <HAL_InitTick+0x70>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fd8:	a901      	add	r1, sp, #4
 8002fda:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fdc:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fde:	f7fe f8cf 	bl	8001180 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002fe2:	f7fe f8b5 	bl	8001150 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_InitTick+0x74>)
 8002fe8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002fea:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002fee:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ff0:	0040      	lsls	r0, r0, #1
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_InitTick+0x78>)
 8002ff4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ff8:	3801      	subs	r0, #1
 8002ffa:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002ffc:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002ffe:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003000:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003002:	f7fe fbad 	bl	8001760 <HAL_TIM_Base_Init>
 8003006:	b918      	cbnz	r0, 8003010 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003008:	4620      	mov	r0, r4
 800300a:	f7fe fa94 	bl	8001536 <HAL_TIM_Base_Start_IT>
 800300e:	e000      	b.n	8003012 <HAL_InitTick+0x66>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003010:	2001      	movs	r0, #1
}
 8003012:	b009      	add	sp, #36	; 0x24
 8003014:	bd30      	pop	{r4, r5, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	20003f64 	.word	0x20003f64
 8003020:	40010000 	.word	0x40010000
 8003024:	000f4240 	.word	0x000f4240

08003028 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8003028:	f7fe be35 	b.w	8001c96 <osSystickHandler>

0800302c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800302c:	2001      	movs	r0, #1
 800302e:	f7fd be0b 	b.w	8000c48 <HAL_GPIO_EXTI_IRQHandler>

08003032 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003032:	2008      	movs	r0, #8
 8003034:	f7fd be08 	b.w	8000c48 <HAL_GPIO_EXTI_IRQHandler>

08003038 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003038:	2010      	movs	r0, #16
 800303a:	f7fd be05 	b.w	8000c48 <HAL_GPIO_EXTI_IRQHandler>
	...

08003040 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003040:	4801      	ldr	r0, [pc, #4]	; (8003048 <CAN1_RX0_IRQHandler+0x8>)
 8003042:	f7fd bb9d 	b.w	8000780 <HAL_CAN_IRQHandler>
 8003046:	bf00      	nop
 8003048:	20003f24 	.word	0x20003f24

0800304c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800304c:	4801      	ldr	r0, [pc, #4]	; (8003054 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800304e:	f7fe ba81 	b.w	8001554 <HAL_TIM_IRQHandler>
 8003052:	bf00      	nop
 8003054:	20003f64 	.word	0x20003f64

08003058 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003058:	4801      	ldr	r0, [pc, #4]	; (8003060 <SPI1_IRQHandler+0x8>)
 800305a:	f7fe b9f1 	b.w	8001440 <HAL_SPI_IRQHandler>
 800305e:	bf00      	nop
 8003060:	20003ecc 	.word	0x20003ecc

08003064 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003064:	4801      	ldr	r0, [pc, #4]	; (800306c <USART1_IRQHandler+0x8>)
 8003066:	f7fe bd31 	b.w	8001acc <HAL_UART_IRQHandler>
 800306a:	bf00      	nop
 800306c:	20003e44 	.word	0x20003e44

08003070 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003070:	4801      	ldr	r0, [pc, #4]	; (8003078 <USART3_IRQHandler+0x8>)
 8003072:	f7fe bd2b 	b.w	8001acc <HAL_UART_IRQHandler>
 8003076:	bf00      	nop
 8003078:	20003d74 	.word	0x20003d74

0800307c <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 800307c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800307e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003082:	f7fd fde1 	bl	8000c48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003086:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800308a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800308e:	f7fd bddb 	b.w	8000c48 <HAL_GPIO_EXTI_IRQHandler>
	...

08003094 <__libc_init_array>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <__libc_init_array+0x3c>)
 8003098:	4c0e      	ldr	r4, [pc, #56]	; (80030d4 <__libc_init_array+0x40>)
 800309a:	1ae4      	subs	r4, r4, r3
 800309c:	10a4      	asrs	r4, r4, #2
 800309e:	2500      	movs	r5, #0
 80030a0:	461e      	mov	r6, r3
 80030a2:	42a5      	cmp	r5, r4
 80030a4:	d004      	beq.n	80030b0 <__libc_init_array+0x1c>
 80030a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030aa:	4798      	blx	r3
 80030ac:	3501      	adds	r5, #1
 80030ae:	e7f8      	b.n	80030a2 <__libc_init_array+0xe>
 80030b0:	f000 f81e 	bl	80030f0 <_init>
 80030b4:	4c08      	ldr	r4, [pc, #32]	; (80030d8 <__libc_init_array+0x44>)
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <__libc_init_array+0x48>)
 80030b8:	1ae4      	subs	r4, r4, r3
 80030ba:	10a4      	asrs	r4, r4, #2
 80030bc:	2500      	movs	r5, #0
 80030be:	461e      	mov	r6, r3
 80030c0:	42a5      	cmp	r5, r4
 80030c2:	d004      	beq.n	80030ce <__libc_init_array+0x3a>
 80030c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030c8:	4798      	blx	r3
 80030ca:	3501      	adds	r5, #1
 80030cc:	e7f8      	b.n	80030c0 <__libc_init_array+0x2c>
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	08003140 	.word	0x08003140
 80030d4:	08003140 	.word	0x08003140
 80030d8:	08003144 	.word	0x08003144
 80030dc:	08003140 	.word	0x08003140

080030e0 <memset>:
 80030e0:	4402      	add	r2, r0
 80030e2:	4603      	mov	r3, r0
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d002      	beq.n	80030ee <memset+0xe>
 80030e8:	f803 1b01 	strb.w	r1, [r3], #1
 80030ec:	e7fa      	b.n	80030e4 <memset+0x4>
 80030ee:	4770      	bx	lr

080030f0 <_init>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	bf00      	nop
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr

080030fc <_fini>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr
